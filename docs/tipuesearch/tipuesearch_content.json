{
    "pages": [
        {
            "tags": "",
            "text": "This is the documentation site for various plugins and external attribute scripts I have developed for the open source seismic interpretation system OpendTect . The plugins are made available under the terms of the GNU General Public License Version 3 .",
            "title": "OpendTect Plugins",
            "url": "/OpendTect-Plugin-Docs/index.html"
        },
        {
            "tags": "",
            "text": "",
            "title": "Search results",
            "url": "/OpendTect-Plugin-Docs/search.html"
        },
        {
            "tags": "",
            "text": "Download Binary Distribution Installation Building from Source Frequently Asked Questions",
            "title": "Installation",
            "url": "/OpendTect-Plugin-Docs/installation/index.html"
        },
        {
            "tags": "",
            "text": "Building from Source Linux These instructions are for Linux. Some of the attributes won't build (eg LTFAttrib )unless Madagascar is installed. Download the source for the plugins for the appropriate version of OpendTect from Github OpendTect v5+ OpendTect v4 Use the OpendTect installation manager to install the OpendTect developer packages and install any other packages required for compiling and building code for your operating environment as per the OpendTect Programmer's Manual Start OpendTect Select the Utilities-Tools-Create Plugin Devel. Env. menu item to create a development work folder (eg /home/user/ODWork). Unzip the attribute source zip archive downloaded in step 1 in the development work folder. This will overwrite the CMakeLists.txt in the development work folder and add the plugin source folders to the plugin folder. Optionally edit CMakeCache.txt in the development work folder and change Debug to Release. Optionally set the environment variable pointing to your Madagascar install export RSFROOT=/opt/OpendTect_4/4.6.0/Madagascar Open a terminal, cd to the development work folder and type: cmake .\n    make This should create the binary files for each plugin, lib*.so and libui*.so, in the bin folder (eg in ODWork/bin/lux64/Release/) and four *.alo files for each plugin in the root of the development work folder. If you don't have Madagascar installed or RSFROOT is not set the plugins that depend on the Madagascar libraries (eg LTFAttrib) won't build and there will be error messages. These error messages can be ignored if you don't want the Madagascar dependent attributes. Windows These instructions are for Windows. Note that the attributes that require Madagascar (eg LTFAttrib ) cannot be built on Windows. Download the source for the plugins for the appropriate version of OpendTect from Github OpendTect v5+ OpendTect v4 Use the OpendTect installation manager to install the OpendTect developer packages and install any other packages required for compiling and building code for your operating environment as per the OpendTect Programmer's Manual Start OpendTect Select the Utilities-Tools-Create Plugin Devel. Env. menu item to create a development work folder (eg c:\\Users\\user\\ODWork). Unzip the attribute source zip archive downloaded in step 1 in the development work folder. This will overwrite the CMakeLists.txt in the development work folder and add the plugin source folders to the plugin folder. Follow the instructions in the OpendTect Programmer's Manual to configure and build the plugins. This should create the binary files for each plugin in the bin folder (eg in ODWork\\bin\\win64\\Release). On Windows you must use \"Release\" build plugins with the \"Release\" version of OpendTect.",
            "title": "Building from Source",
            "url": "/OpendTect-Plugin-Docs/installation/building-from-source.html"
        },
        {
            "tags": "",
            "text": "Installation For both Linux and Windows there are 2 alternatives, site wide installation or per-user installation. Linux Sitewide Installation To install the plugins into the OpendTect program folder (eg /opt/seismic/OpendTect/5.0/ ): Copy the contents of the bin/lux64/Release/ folder in the tgz file to /opt/seismic/OpendTect/5.0.0/bin/lux64/Release/ ; Copy the contents of the plugins/lux64/ folder in the tgz file to /opt/Seismic/OpendTect/5.0.0/plugins/lux64/ ; and Restart OpendTect. Per-user Installation On Linux it is also possible to install the plugin files in a users .od folder. Note that the OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. See the FAQ for a workaround if you want to use this method of installation and want to run both versions of OpendTect. Copy the contents of the bin/lux64/Release/ folder in the tgz file to the users .od/bin/lux64/Release/ folder; Copy the contents of the plugins/lux64/ folder in the tgz file to the users .od/plugins/lux64/ folder; and Restart OpendTect. Windows Sitewide Installation To install the plugins into the OpendTect program folder (eg c:\\Program Files\\opendtect\\ ): Copy the contents of the bin\\win64\\Release\\ folder in the zip file to c:\\Program Files\\opendtect\\bin\\win64\\Release\\ ; Copy the contents of the plugins\\win64\\ folder in the zip file to c:\\Program Files\\opendtect\\plugins\\win64\\ ; and Restart OpendTect. Per-user Installation On Windows it is also possible to install the plugin files in a users .od folder. Note that the OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. See the FAQ for a workaround if you want to use this method of installation and want to run both versions of OpendTect. Copy the contents of the bin\\win64\\Release\\ folder in the zip file to the users C:\\Users\\%username%\\.od\\bin\\win64\\Release\\ folder; Copy the contents of the plugins\\win64\\ folder in the zip file to the users C:\\Users\\%username%\\.od\\plugin\\win64\\ folder; and Restart OpendTect.",
            "title": "Installation",
            "url": "/OpendTect-Plugin-Docs/installation/installation.html"
        },
        {
            "tags": "",
            "text": "Download Binary Distribution Compiled versions of the plugins for Linux x86_64 and Windows x86_64 are available for download at the links below. OpendTect Version 6.2 OS LATEST Linux Windows OpendTect Version 6.0 OS LATEST OTHER Linux On Bintray Windows On Bintray OpendTect Version 5 OS LATEST OTHER Linux On Bintray Windows On Bintray OpendTect Version 4",
            "title": "Download Binary Distribution",
            "url": "/OpendTect-Plugin-Docs/installation/download-binary.html"
        },
        {
            "tags": "",
            "text": "FAQ Building plugins that require Madagascar To build plugins that use the Madagascar libraries (eg LTFAttrib) you need to set the RSFROOT environment variable before building the plugins. export RSFROOT=/opt/OpendTect_4/4.6.0/Madagascar\n    cmake.\n    make Plugins not loading Try manually loading the plugin. Check the OpendTect log file for error messages and see if there is already a solution outlined elsewhere in this page. Open an issue on GitHub. Per-user Installation and Multiple OpendTect versions The OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. There are a couple of ways you can have access to plugins for both versions of OpendTect. Use the OD_USER_PLUGIN_DIR environment variable This is the preferred option because it allows the same application settings files to be shared by both versions of OpendTect. For Windows Create od5 and od4 folders in the C:\\Users\\ username folder Install the OpendTect-4-plugins in the od4 folder and the OpendTect-5-plugins in the od5 folder as per the installation instructions . Create a \"bat\" file to start each version of OpendTect that sets the OD_USER_PLUGIN_DIR environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.bat might look like: @set OD_USER_PLUGIN_DIR=%HOMEPATH%\\od5\nstart \"\" \"C:\\Program Files\\OpendTect_5\\5.0.0\\bin\\win64\\Release\\od_start_dtect.exe\" For Linux Create .od5 and .od4 folders in the users home directory mkdir ~/.od5 \n    mkdir ~/.od4 Install the OpendTect-4-plugins in the users .od4 folder and the OpendTect-5-plugins in the .od5 folder as per the installation instructions . Create executable shell scripts to start each version of OpendTect that sets the OD_USER_PLUGIN_DIR to the appropriate folder before starting OpendTect. Here is what odt_5.csh might look like: #!/bin/csh -f\n    setenv OD_USER_PLUGIN_DIR \"$HOME/.od5\"\n    /path to OpendTect 5/start_dtect Have 2 user settings folders For Windows Copy the users existing .od folder to .od5 Install the OpendTect-4-plugins in the .od folder and the OpendTect-5-plugins in the .od5 folder as per the installation instructions . Create a \"bat\" file to start OpendTect 5  that sets the DTECT_SETTINGS environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.bat might look like: @set DTECT_SETTINGS=%HOMEPATH%\\.od5\nstart \"\" \"C:\\Program Files\\OpendTect_5\\5.0.0\\bin\\win64\\Release\\od_start_dtect.exe\" For Linux Copy the users existing .od folder to .od5 Install the OpendTect-4-plugins in the .od folder and the OpendTect-5-plugins in the .od5 folder as per the installation instructions . Create an executable shell script to start OpendTect 5 that sets the DTECT_SETTINGS environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.csh might look like: #!/bin/csh -f\n\n    setenv DTECT_SETTINGS \"$HOME/.od5\"\n    /path to OpendTect 5/start_dtect libstdc++.so.6: version 'GLIBCXX_3.4.??' not found This happens when the plugin is built with a gcc version different to the version used to build OpendTect. Solutions are: (Easy and seems to work ok but could break something) Rename the libstdc++.so.6 file in the OpendTect installation bin/lux64 folder to say old_libstdc++.so.6 and restart OpendTect. (Hard) Install the same version of gcc that OpendTect was built with and rebuild the plugin. (Hardest) Build OpendTect from source using your installed gcc.",
            "title": "Frequently Asked Questions",
            "url": "/OpendTect-Plugin-Docs/installation/faq.html"
        },
        {
            "tags": "plugin",
            "text": "This attibute plugin for the open source seismic interpretation platform OpendTect Version 6.0.0 or later calculates inline, crossline and time/depth gradients. Description This plugin calculates the inline, crossline or time/depth gradient using operators optimised for rotation invariance, ie equal response in all directions, proposed  by Kroon (2009) and Farid and Simoncelli(2004) . These provide more accurate alternatives to the Prewitt filter option of the OpendTect Convolve attribute for computing gradients. The attribute offers a choice of Kroon's 3x3x3, Farid and Simoncelli's 5x5x5 or Farid and Simoncelli's 7x7x7 operator. The following figures demonstrate the relative accuracy of these operators and the OpendTect Prewitt filter on a simple periodic signal (top left) with event dip angle shown top right. Gradients calculated using each operator are used to compute the event dip angle and the absolute dip angle error. The superior accuracy of the operators provided by this attribute is clear. Accuracy of the gradient attribute operators Input Parameters This attribute has 3 parameters: NAME DESCRIPTION Input Volume The input attribute volume. Output Gradient What to calculate - choice of Inline, Crossline or Z gradient. Operator What operator to use - choice of Kroon's 3x3x3, Farid's 5x5x5 or Farid's 7x7x7. Gradient attribute input parameter dialog",
            "title": "GradientAttrib - Gradients",
            "url": "/OpendTect-Plugin-Docs/plugins/GradientAttrib.html"
        },
        {
            "tags": "plugin",
            "text": "This attribute plugin for the open source seismic interpretation platform OpendTect calculates 6 attributes based on different parameterizations of reflection intercept and gradient. Description The intercept-gradient crossplot is widely used for amplitude-variation-with-offset (AVO) analysis in hydrocarbon exploration.  The intercept is the zero offset or normal incidence reflection amplitude/coefficient of an event while the gradient is the change in reflection amplitude/coefficient with offset or incidence angle. Some authors refer to intercept as A or P and gradient as B or G. Modelling studies show that changes in subsurface rock properties such as lithology, porosity and pore fluid content result in systematic changes in intercept-gradient space. The following figure, adapted from the very informative paper on AVO by Foster etal (2010) , illustrates the ideal intercept-gradient crossplot response for a clastic sequence to changes in porosity and pore fluid. The Fluid Line or Background Trend is where reflections from shales and some wet sands that have little contrast in Vp/Vs plot. Ideal AVO crossplot for a clastic sequence Another popular classification of AVO effects on the intercept-gradient crossplot is the 3 class AVO scheme of Rutherford and Williams (1989) based on acoustic impedance contrasts with the addition of a 4th class for high porosity gas sands introduced by Castagna and Swan (1997) . The position of these 4 AVO classes on the intercept-gradient crossplot is shown in the following figure. AVO classes This plugin calculates 6 attributes which are essentially just coordinate transformations of the intercept and gradient that aim to highlight changes of a particular rock property based on the expected behaviour of clastic reservoir sequences. ATTRIBUTE DESCRIPTION Fluid Factor Fluid Factor is a reprojection of intercept/gradient coordinates that highlights deviation from the Fluid Line. As the name implies this attribute highlights changes related to fluid compressibility. The Fluid Factor was introduced by Smith and Gidlow (1987) . Lithology Factor Lithology Factor is the companion coordinate reprojection to Fluid Factor. It highlights changes parallel to the Fluid Line. Porosity Factor Porosity Factor is just Lithology Factor with the values above the fluid line reversed so the attribute magnitude always increases in the same sense as the effect of increasing porosity, i.e. the attribute magnitude increases to the upper left below the Fluid Line and to the lower right above the Fluid Line. Crossplot Angle Crossplot Angle is the angle between an intercept-gradient point and the Fluid Line. It runs from 0 to 180 below the Fluid Line measured counter-clockwise from the upper left projection of the Fluid Line. It runs from 0 to -180 above the Fluid Line measured counter-clockwise from the lower right projection of the Fluid Line. The Crossplot Angle and Deviation can be interpreted as the polar coordinates of a data point in the intercept-gradient crossplot space. Crossplot Deviation Crossplot Deviation is the distance from the crossplot origin. This attribute is most useful as a transparency mask to remove data close to the centre of the crossplot. AVO Class AVO Class classifies intercept-gradient points according to the 4 class AVO scheme of Rutherford and Williams (1989) and Castagna and Swan (1997). Points below the Fluid Line have a positive class number and those above have a negative class number. Input Parameters These attributes have 4 required parameters and 4 extra parameters that may be required depending on the attribute being calculated: NAME DESCRIPTION Intercept Volume The attribute volume to use as the zero offset or normal incidence reflection amplitude coefficient. If no intercept volume is available a near angle or offset stack can be used as an alternative. Gradient Volume The attribute volume to use as the change in reflection amplitude/coefficient with offset at normal incidence. If no gradient volume is available, the difference between amplitudes on far and near angle or offset stacks can be used as an alternative. Output The attribute to calculate. There is a choice of Fluid Factor, Lithology Factor, Porosity Factor, Crossplot Angle, Crossplot Deviation or AVO Class. Crossplot Slope The slope of the fluid line interpreted on the intercept-gradient crossplot. This can be read from the properties dialog of the crossplot tool. Intercept Standard Deviation (Optional) Standard deviation of the intercept volume. Only required for the Crossplot Angle and Crossplot Deviation attributes. This can be read from the 1D histogram tool in the crossplot table. Gradient Standard Deviation (Optional) Standard deviation of the gradient volume. Only required for the Crossplot Angle and Crossplot Deviation attributes. This can be read from the 1D histogram tool in the crossplot table. Correlation Coefficient (Optional) Correlation coefficient between the intercept and gradient volumes. Only required for the Crossplot Deviation attribute. This can be read from the properties dialog of the crossplot tool. Class 2 Intercept Offset Half width in intercept coordinates of the Class 2 region on the AVO Class crossplot. Only required for the AVO Class attribute. AVO Attribute Plugin input parameters",
            "title": "AVOAttrib - AVO Attributes",
            "url": "/OpendTect-Plugin-Docs/plugins/AVOAttrib.html"
        },
        {
            "tags": "",
            "text": "AVOAttrib - AVO Attributes ExternalAttrib - External Attribute GradientAttrib - Gradients LTFAttrib - Spectral Decomposition by Local Attributes MLVFilterAttrib - Mean of Least Variance Filter RSpecAttrib - Recursive Spectral Decomposition",
            "title": "Plugins",
            "url": "/OpendTect-Plugin-Docs/plugins/index.html"
        },
        {
            "tags": "plugin",
            "text": "This attribute plugin for the open source seismic interpretation platform OpendTect Version 6.0.0 or later performs time-frequency decomposition using a recursive filter. Description This plugin can be used as an alternative to the OpendTect FFT spectral decomposition attribute . It does spectral decomposition using Nilsen's (2007) time-frequency analysis algorithm which is a recursive filter approximation to a special case of the short time fourier transform (STFT). The primary advantage of this plugin over the standard OpendTect FFT spectral decomposition is that it can be evaluated significantly faster. As an example, under Linux on an Intel Core i5 for a 2000 sample per trace dataset, this attribute can generate a single frequency cube at 4000 traces per second. This is considerably faster than the 140-150 traces per second achieved when applying the OpendTect FFT spectral decomposition attribute. This processing speed advantage is reduced as the number of output frequencies increases but in this test case it still remains substantially faster even for output of up to 30 frequencies. Examples The output of the RSpec attribute (rfreq30) is visually identical and also highly correlated to the OpendTect FFT spectral decomposition (sdfreq30) as shown in the following crossplot of the two attributes. Crossplot of RSpecAttrib vs FFT Spectral Decomposition Input Parameters This attribute has 4 parameters: NAME DESCRIPTION Input Volume The attribute volume to be analysed. Time/Depth Gate This determines the position and time resolution of the analysis. The value from the gate centre is output - useful for analysing a zone offset from an horizon. Recommend setting the gate length equal to or less than the FFT window length you would used for the standard OpendTect FFT spectral decomposition. Output frequency When displaying the attribute in the tree this is the frequency slice that will be generated. Step This determines the set of frequencies that can be chosen when generating a frequency volume. RSpecAttrib input parameter dialog",
            "title": "RSpecAttrib - Recursive Spectral Decomposition",
            "url": "/OpendTect-Plugin-Docs/plugins/RSpecAttrib.html"
        },
        {
            "tags": "plugin",
            "text": "LTFAttrib This attribute plugin for the open source seismic interpretation platform OpendTect Version 6.0 or later performs time-frequency decomposition using local attributes. Description This is an implementation of the method of local time-frequency analysis described by Liu, G etal (2011) . The time-frequency decomposition uses least-squares inversion with shaping regularization. It is different to STFT (short time fourier transform) which divides the data into windows to  localize frequency content in time. This plugin requires a working installation of Madagascar and provides an example of an attribute using the Madagascar libraries. This attribute can be unstable. The issue apppears to be in the Madagascar libraries as the same instabilites exist when the equivalent Madagascar command line program ( sftimefreq ) is applied. Examples The output of the LTF attribute (ltf30) is visually identical and also highly correlated to the OpendTect FFT spectral decomposition (sdfreq30) as shown in the following crossplot of the two attributes. Crossplot of LTFAttrib vs FFT Spectral Decomposition Input Parameters This attribute has 4 parameters: NAME DESCRIPTION Input Volume The attribute volume to be analysed. Frequency The frequency component to estimate. Smoothing Radius In shaping regularization this parameter controls the smoothness of the model. Iterations The number of inversion iterations. Margin Amount of data around the calculation sample to include in the calculation. Specified in number of smoothing radii. LTF Attributes input parameters",
            "title": "LTFAttrib - Spectral Decomposition by Local Attributes",
            "url": "/OpendTect-Plugin-Docs/plugins/LTFAttrib.html"
        },
        {
            "tags": "plugin",
            "text": "This attribute plugin for the open source seismic interpretation platform OpendTect allows attributes to be developed in a scripting language like Python. Description With this plugin it is possible to calculate single and multitrace attributes outside of OpendTect using a user specified external application. The plugin supports multi-trace multi-attribute input and multi-attribute output as well as parallel execution. NOTE: Releases prior to 6.0.2 allowed multi-trace multi-attribute input only if all the attributes were in the same multi-attribute volume. In releases from 6.0.2 onward this limitation has been removed. Instead of doing the attribute calculation within OpendTect this plugin starts up a user specified external application and then reads and writes the trace data to/from the external application's stdin and stdout. The external application could be written in any programming language, compiled or interpreted, provided it has the Structure of a Conforming Application . This essentially means you can write a new OpendTect attribute in your computer language of choice and not have to delve into the internals of OpendTect. A reference implementation for writing external attributes in Python/Numpy (version 3) is available. This consists of a module extattrib.py that handles the stdin/stdout details and presents the trace data as a numpy array. Guides and Tips and Tricks to assist can be found in various Articles There are external attribute scripts for everything from dip estimation to filtering described in the External Attributes section of this documentation. Input Parameters This attribute has 3 required parameters and up to 9 optional parameters determined by the JSON Parameter String provided by the external attribute script: NAME DESCRIPTION Interpreter For external attributes written in a scripted language this field specifies the location of the  interpreter required to run the script, eg /usr/bin/python3 External File The external application to be used for attribute calculation. Input The input attribute to use External Attribute Plugin input parameters Cross Platform Setup Prior to release 5.10 and 6.0.0pre7-1 any attribute set containing external attributes could not be shared between Windows and Linux because the Interpeter and External File input fields contain platform specific file paths. Release 5.10 and 6.0.0pre7-1 introduced an optional mechanism to support cross platform attribute sets containing external attributes by using environment variables. Consider the following script for starting OpendTect on Linux: #!/bin/csh -f\nsetenv DTECT_SETTINGS \"$HOME/.od6\"\nsetenv OD_USER_PLUGIN_DIR \"$HOME/.od6\"\nsetenv EX_PYTHON \"/opt/anaconda3/bin/python\"\nsetenv OD_EX_DIR \"$HOME/Development/GIT_AREA/OpendTect-External-Attributes/\"\n/opt/seismic/OpendTect_6/6.0.0/start_dtect And an equivalent Windows command file: @set OD_USER_PLUGIN_DIR=%HOMEPATH%\\od6\n@set EX_PYTHON=C:\\Miniconda3\\python.exe\n@set OD_EX_DIR=E:\\Development\\GIT_AREA\\OpendTect-External-Attributes\\\nstart \"\" \"C:\\Program Files\\OpendTect_6\\6.0.0\\bin\\win64\\Release\\od_start_dtect.exe\" The environment variable EX_PYTHON points to the python interpreter for each platform and entering %EX_PYTHON% into the Interpreter input field ensures the platform appropriate interpreter is used. Any name can be used for the environment variable. The  environment variable OD_EX_DIR points to a root folder below which the attribute script files can be found. The setting in the Linux startup script points to a Linux folder. The corresponding setting in the Windows command file points to the same location via a network share. This environment variable name is hard wired into the code so this variable name cannot be changed. Note that the script files cam be located in subfolders of the OD_EX_DIR folder. This type of setup produces attribute set descriptions like this: 7.Definition: ExternalAttrib interpfile=%EX_PYTHON% exfile=%OD_EX_DIR%tests/ex_ui_test_all.py zmargin=[-1,1] stepout=1,1 selection=2 par0=0 par1=1 par2=2 par3=3 par4=4 par5=5 output=0 which can be used on either platform without change. Attribute sets created by release 5.0.10 and 6.0.0pre7-1 and later that use these environment variables will not work in earlier versions of the External Attribute plugin. JSON Parameter String The external application can specify a set of parameters as a JSON object string. The following keywords are supported: JSON KEYWORD Input (depreciated) TYPE String DESCRIPTION Specifies a label to appear beside the input attribute selection UI element.",
            "title": "ExternalAttrib - External Attribute",
            "url": "/OpendTect-Plugin-Docs/plugins/ExternalAttrib.html"
        },
        {
            "tags": "plugin filter",
            "text": "This attribute plugin for the open source seismic interpretation platform OpendTect applies a structure preserving Mean of Least Variance filter. Description This attribute is an implementation of a mean of least variance filter Schulze & Pearce (1993) where the analysis elements are all the possible planes through the sample points in the analysis block. This algorithm may be similar to that proposed by Al-Dossary & Wang (2011) . The sample variance for all samples on each analysis element is calculated and the output statistic (average, mean or element index) is output for the element with the least variance. The following figure shows the relationship between the geometry of the analysis elements and the element index. MLV Filter analysis elements Examples MLV 3 elements Input Parameters This attribute has 2 parameters: NAME DESCRIPTION Filter size Specifies a cube of samples centred  at the analysis location. Increasing the size will increase the degree of smoothing at the risk of smearing structural features. As the examples show it may be better to apply multiple passes of a small size filter than a single pass of a larger filter to reduce the risk of artifacts in the output. OpendTect makes it really easy to cascade multiple filter passes. Output statistic What the filter will output. The options are average, median or the element index. The element index is included for curiosity and quality control. Generally the default Average provides the most pleasing output. MLF Filter input parameters",
            "title": "MLVFilterAttrib - Mean of Least Variance Filter",
            "url": "/OpendTect-Plugin-Docs/plugins/MLVFilter.html"
        },
        {
            "tags": "",
            "text": "Python External Attribute Tips & Tricks - Debugging 08-Jun-2018",
            "title": "Articles",
            "url": "/OpendTect-Plugin-Docs/articles/index.html"
        },
        {
            "tags": "",
            "text": "Introduction It is possible to write information to the OpendTect logfile from inside a Python ExternalAttrib - External Attribute script. The global variable xa.logH (assuming the extattrib module has been imported using import extattrib as xa ) is a Python logger object . An Example On line 18 the Python logger is modified by adjusting the severity level of messages that will appear in the log file. By default only CRITICAL, ERROR and WARNING messages will be written. On line 22 a message is written to the logfile showing the full path to the Python interpreter executing the script. As this line is in the Compute Loop Initialisation section it is only written at each invocation of the script. On line 32 a message is written that identifies the location, minimum and maximum of the trace being processed. As this line is in the Compute Loop a message is output for every trace processed. The Result",
            "title": "Python External Attribute Tips & Tricks - Logging",
            "url": "/OpendTect-Plugin-Docs/articles/2018-06-06.html"
        },
        {
            "tags": "",
            "text": "Introduction Because the Python ExternalAttrib - External Attribute script is running in a process started by the OpendTect application most standard methods to examine the script as it runs, eg using the standard Python debugger pdb , are not available. A solution is to use the Web-PDB Python module which allows the Python script to be debugged remotely in a web-browser. Web-PDB Installation Web-PDB is not included by default in most Python installations but it can be easily added using pip : pip install web-pdb Adding Web-PDB to a Script Adding Web-PDB to a script is just a matter of importing the module as shown on line 5 and adding a call to web_pdb.set_trace() as shown on line 19. The web_pdb.set_trace() call acts like a breakpoint and can be inserted as many times as required. For simplicity it is best to disable multi-threaded processing (add a Parallel: False line to the xa.params object) while debugging. Debugging with Web-PDB After adding Web-PDB to the ExternalAttrib - External Attribute script it will run to the first breakpoint where execution will be suspended and a web-UI opened at the default port 5555. Pointing a web browser at http://<your  machine hostname or IP>:5555 , eg http://127.0.0.1:5555 , should show an interface for debugging as above. The buttons provide control on the script execution, hover the mouse pointer over them to see tooltips for each. More complex pdb commands can be inserted in the entry at the bottom of the screen. Click the ? button for a list of useful pdb commands. Web-PDB and Multi-threaded Processing It is possible to use Web-PDB with a script that has multi-threaded processing enabled by replacing the initial web_pdb.set_trace call with: web_pdb.set_trace( port=-1 ) This will cause each Python process to select a random port between 32768 and 65536. Operating System specific commands can then be used to determine the ports opened, eg: On Linux: ss -lntu in a console window. On Windows: netstat -an in a command window. A web-UI will need to be opened for each port and each process will need to be stepped through all breakpoints for attribute execution to progress.",
            "title": "Python External Attribute Tips & Tricks - Debugging",
            "url": "/OpendTect-Plugin-Docs/articles/2018-06-08.html"
        },
        {
            "tags": "",
            "text": "Introduction This article will review the structure of a simple Python ExternalAttrib - External Attribute script, ex_dip.py , which converts inline and crossline dip to true dip and dip azimuth. It is an example of multi attribute, single trace input and output. Some basic understanding of Python and Numpy is assumed. Every Python attribute script has 5 sections. The Imports This is where external modules/libraries required by the script are loaded. At a minimum the script must load: the Python sys and os modules the Numpy module (the fundamental package for scientific computing with Python) the external attribute module (extattrib.py) Generally sys, os and Numpy will be part of the Python installation. The extattrib module is part of the external attribute scripts package and its location is unknown to the Python installation unless we help out. The sys.path.insert call on line 11 provides this help by extending the default search path for Python modules to include the parent folder of the folder containing the script. This reflects the folder structure of the external attribute scripts package, so if you develop scripts outside this structure then you will need to change line 11 appropriately to append the location of extattrib.py to the module search path. Of course if your script requires other Python modules (eg SciPy, Numba) then add the appropriate import statements in this section. The Parameters The xa.params global variable must be assigned a JSON object string describing the input parameters for the script. This JSON string is used by the plugin to build an input dialog box. This attribute is very simple specifying just 2 input volumes and 2 output volumes and a url for documentation. The plugin dynamically builds the following input dialog for this script: A variety of other input elements can be specified to build more complex input dialogs. See the JSON Parameter String section of the plugin documentation for full details or look at other scripts to see what is possible. The Compute Loop Initialisation The doCompute function is where the attribute calculation occurs. The function is divided into 2 parts some initialisation and the \"while True:\" loop, discussed in the next section, where the calculations actually take place. Any code in this initialisation section will be executed just once when the attribute script is run and is a good place to calculate constants for use in the Compute Loop. This particular script shows how information stored in the SeismicInfo Block can be used to calculate some constants purely as an example. This attribute is so simple that no initialisation is actually required. The Compute Loop This is where the attribute calculation takes place. The xa.doInput() and xa.doOutput() function calls control the input and output of seismic trace data between the script and OpendTect. Generally these should be the first and last statements within the compute loop. Within the compute loop, some information about the current trace data such as the number of samples and the inline and crossline location are provided in the TraceInfo Block . These can be accessed using constructs like xa.TI['nrsamp'] . This information is not required for this particular script. The global Numpy array xa.Input contains the input trace data. xa.Input['name of input attribute'] returns a Numpy array with the trace data for the current compute location. The shape of this Numpy array depends on the traces stepouts required by the attribute. As this particular script uses just single trace input (inline and crossline step out of 0) the Numpy array has a shape of (1,1,xa.TI['nrsamp']) . In the more general case of a multi-trace attribute the Numpy array shape would be (xa.SI['nrinl'], xa.SI['nrcrl'], xa.TI['nrsamp']) and the input trace at the current location would be at the centre of the array, ie at index [xa.SI['nrinl']//2, xa.SI['nrcrl']//2,...] . Attribute ouput must be put into the xa.Output global Numpy array before the xa.doOutput() function call. Each element (eg xa.Output['name of output attribute'] ) of the output array must have a shape of (1,1,xa.TI['nrsamp']) The Postamble This section is just boilerplate code that apprears in every attribute script which should never be changed.",
            "title": "Anatomy of a Python External Attribute",
            "url": "/OpendTect-Plugin-Docs/articles/2018-06-04.html"
        },
        {
            "tags": "external-attribute",
            "text": "Script: Miscellaneous/ex_correlation.py Description This Python ExternalAttrib - External Attribute script provides an alternative to the builtin OpendTect Match Delta attribute to measure time shifts between similar events in different seismic volumes. This script uses local normalised cross correlation to determine the relative Z shift between 2 data volumes. Aside from the estimate of relative Z shift the attribute can also output the correlation value. The correlation value which ranges from 0 (low correlation) to 1 (high correlation) provides a quantitative assessment of the reliability of the Z shift estimate. The script requires the Numba Python package. Examples This example provides a comparison of this external attribute script (left) with the Match Delta attribute (right) for a depth section and itself shifted up by 13 metres. The Match Delta attribute output is much noisier albiet it can be calulated much quicker. This example shows the Correlation Quality output for the same data as above. Correlation quality Input Parameters ex_correlation.py input parameters NAME DESCRIPTION Output What to calculate - choice of the Z shift in millisecs or metres or the corresponding correlation coefficient. Z window (+/-samples) This in conjunction with the Max Lag parameter determines the length of the segments cross correlated. $ SegmentLength = 2*(Zwindow - MaxLag)+1 $. Max Lag (samples) Specifies maximum number of samples to search for the maximum correlation. Note the user has to ensure that Z window is greater than Max Lag otherwise the script will exit with errors.",
            "title": "Time Delay Estimation",
            "url": "/OpendTect-Plugin-Docs/external_attributes/Z_Delay_Est.html"
        },
        {
            "tags": "external-attribute",
            "text": "Description These ExternalAttrib - External Attribute scripts estimate AVO intercept and gradient based on Shuey's 2 term approximation to the Zoeppritz  equation. Intercept and Gradient from 4 Angle Stacks Script: Miscellaneous/ex_angle_stacks_4_to_AVOIG.py Takes as input 4 angle stacks and the corresponding angles and fits a least squares line to the amplitude and $ sin^2(angle) $ at each sample point. Ouput includes the intercept, gradient and the correlation coefficient of the line fit. Input Parameters ex_angle_stacks_4_to_AVOIG.py input parameters For each input volume the corresponding incident angle must be provided.",
            "title": "AVO Intercept and Gradient",
            "url": "/OpendTect-Plugin-Docs/external_attributes/AVO_IG.html"
        },
        {
            "tags": "",
            "text": "AVO Intercept and Gradient Add Noise Dip and Azimuth LPA Smoothing Spatial Filter - Circular Spatial Filter - Rectangular Time Delay Estimation Vector Filter ZC Block",
            "title": "External Attributes",
            "url": "/OpendTect-Plugin-Docs/external_attributes/index.html"
        },
        {
            "tags": "external-attribute filter",
            "text": "Script: ex_lpa_smooth.py Description This Python ExternalAttrib - External Attribute script can be used to filter noise while preserving steep dips. A region of data around each sample location is approximated by a second order 3D polynomial using gaussian weighted least squares. The approximation has the following form: $$ r_0+ r_1 * x + r_2 * y + r_3 * z + r_4 * x^2 + r_5 * y^2 + r_6 * z^2 +r_7 * x * y + r_8 * x * z + r_9 * y * z $$ where x (inline), y (crossline) and z (time/depth) are relative to the analysis location, ie the analysis location has x=y=z=0. This attribute calculates and outputs only the $ r_0 $ term of the local polynomial approximation. This provides a smoother version of the input with relatively minor smearing of steep dips and fault cuts. Increasing either the Weight Factor or size of the analysis volume (StepOut or Z window) increases the amount of smoothing. Examples Input Parameters LPA Smoothing external attribute input parameters NAME DESCRIPTION Z window (+/-samples) Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be $ 2 * Zwindow + 1 $. Stepout Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be $ 2 * Stepout + 1 $. Weight Factor Determines the extent of the gaussian weight function used in the weighted least squares approximation.  The standard deviation of the gaussian weight function ($ \\sigma $) is related to this value by\n\n$$ \\sigma = min(2*Stepout, 2*Zwindow) * WeightFactor $$\n\nA value of 0.15 gives near zero weight for points at the smallest extent of the analysis cube. References Anisotropic Multidimensional Savitzky Golay kernels for Smoothing, Differentiation and Reconstruction Polynomial Expansion for Orientation and Motion Estimation",
            "title": "LPA Smoothing",
            "url": "/OpendTect-Plugin-Docs/external_attributes/LPA_Smooth.html"
        },
        {
            "tags": "external-attribute filter",
            "text": "Script: ex_vector_filter_dip.py Description This ExternalAttrib - External Attribute script can be used to apply a vector filter to orientation ( inline and crossline dip) data. The script offers a choice of mean vector, L1 vector median and L2 vector median filters. Initially the inline and crossline dip data are converted to a normal vector to the local orientation: $ [x_i, y_i, z_i] $. The Mean Vector Filter averages each of the vector components of the orientation normal vectors in the analysis cube:\n$$\n\\Big[x_f, y_f, z_f\\Big]  = \\frac{1}{N} \\Big[\\sum\\limits_{i}^N x_i, \\sum\\limits_{i}^N y_i, \\sum\\limits_{i}^N z_i\\Big]\n$$ The L1 vector filter finds the normal vector in the analysis cube whose sum of absolute distance from all the others is a minimum:\n$$\n\\Big[x_f, y_f, z_f\\Big] = argmin \\sum\\limits_{i}^N \\Big[|x_f-x_i| + |y_f-y_i| + |z_f-z_i|\\Big]\n$$ The L2 vector filter finds the normal vector in the analysis cube whose sum of squared distance from all the others is a minimum:\n$$\n\\Big[x_f, y_f, z_f\\Big] = argmin \\sum\\limits_{i}^N \\Big[(x_f-x_i)^2 + (y_f-y_i)^2 + (z_f-z_i)^2\\Big]\n$$ The filtered orientation can be output as any of the following: OUTPUT DESCRIPTION Inline Dip Event dip observed on a crossline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger inline numbers producing positive dips. Crossline Dip Event dip observed on an inline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger crossline numbers producing positive dips. True Dip Event dip in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output is always positive. Dip Azimuth Azimuth of the True Dip direction relative to the survey orientation. Output ranges from -180 to 180 degrees. Positive azimuth is defined from the inline in the direction of increasing crossline numbers. Azimuth = 0 indicates that the dip is dipping in the direction of increasing crossline numbers. Azimuth = 90 indicates that the dip is dipping in the direction of increasing inline numbers. The script requires the Numba Python package. Examples Unfiltered phase dip - crossline dip on an inline Mean vector filtered phase dip - 3x3x3 (Stepout and ZWindow of 1) L1 vector median filtered phase dip - 3x3x3 (Stepout and ZWindow of 1) L2 vector median filtered phase dip - 3x3x3 (Stepout and ZWindow of 1) Input Parameters ex_vector_filter_dip.py input parameters NAME DESCRIPTION Output What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth. Z window (+/-samples) Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be $ 2*Zwindow+1 $. Stepout Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be $ 2*Stepout+1 $. Filter Choice of Mean Dip, L1 Vector Median or L2 Vector Median.",
            "title": "Vector Filter",
            "url": "/OpendTect-Plugin-Docs/external_attributes/Vector_Filters.html"
        },
        {
            "tags": "external-attribute",
            "text": "Zero Crossing Block Script: Miscellaneous/ex_zc_block.py Description This Python ExternalAttrib - External Attribute script blocks a seismic trace between zero crossings. The block amplitude is determined by the min/max of the interval blocked. The script requires the Numba Python package. Examples This example shows the attribute output (black wiggle) over the input (variable density). To get a blocky wiggle display interpolation has to be turned off in the 2D viewer properties. Zero crossing block Input Parameters ex_zc_block.py input parameters There are no input parameters other than selection of the input volume.",
            "title": "ZC Block",
            "url": "/OpendTect-Plugin-Docs/external_attributes/ZC_Block.html"
        },
        {
            "tags": "external-attribute filter",
            "text": "Script: Filtering/ex_spatial_filter_rectangular.py Description This Python ExternalAttrib - External Attribute script applies lowpass, highpass, bandpass or band reject spatial filters with rectangular symmetry. The filters are applied by direct spatial convolution of a kernel formed by cascading two 1D MAXFLAT operators ( Khan and Ohba (2001) ). By setting the stepout in one direction to 0 the filter will be applied as a 1D spatial filter in the other direction. Note that the filter cutoff or band pass/reject frequency is specified in Normalised Spatial Frequency. Normalised Frequency ranges from 0 to 1 at the spatial nyquist. Converting a spatial frequency in cycles/metre to the equivalent Normalised Spatial Frequency is as simple as dividing it by the spatial nyquist frequency. Examples This example shows inline and crossline FK spectra after applying a 2D lowpass rectangular filter with inline and crossline normalised frequency cutoffs of 0.6 and 0.3 respectively. This example shows a timeslice at 300ms TWT from the F3 Demo dataset after applying a 1D spatial filter along the inlines (stepout of 0,9) with a crossline normalised frequency cutoff of 0.5. This example shows the timeslice at 300ms TWT from the F3 Demo dataset with the crossline lowpass filter above followed by a 1D bandreject spatial filter along the crosslines (stepout 9,0) with an inline normalised rejection frequency of 0.17. Input Parameters ex_spatial_filte_rectangular.py input parameters NAME DESCRIPTION Stepout Determines the size of the convolution operator. Minimum of 9 (filter kernel size of 19) recommended. Setting the stepout to zero will apply a 1D filter, e.g. a stepout of 0,9 will apply a 1D crossline frequency filter. Type Filter type - Low Pass, High Pass, Band Pass or Band Reject. Normalised Inline Spatial Frequency For Low Pass and High Pass filters this specifies the inline filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point. Normalised Xline Spatial Frequency For Low Pass and High Pass filters this specifies the crosslineline filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point.",
            "title": "Spatial Filter - Rectangular",
            "url": "/OpendTect-Plugin-Docs/external_attributes/Spatial_Filter_Rectangular.html"
        },
        {
            "tags": "external-attribute filter",
            "text": "Script: Filtering/ex_spatial_filter_circular.py Description This Python ExternalAttrib - External Attribute script applies lowpass, highpass, bandpass or band reject circularly symmetric spatial filters. The filters are applied by direct spatial convolution using the MAXFLAT operators presented by Khan and Ohba (2001) . Filter responses Note that the filter cutoff or band pass/reject frequency is specified in Normalised Spatial Frequency. Normalised Frequency ranges from 0 to 1 at the spatial nyquist. Converting a spatial frequency in cycles/metre to the equivalent Normalised Spatial Frequency is as simple as dividing it by the spatial nyquist frequency. As written the filter does not take into account differences in spatial sampling in the inline and crossline directions. Examples This example uses a Low Pass filter to remove acquisition footprint from the F3 Demo dataset. FK spectrum of inline 425 Note the noise at 0.0133 cycles/metre or 0.67 normalised frequency (i.e. 0.0133/0.02). A spatial low pass filter with a normalised frequency cutoff of 0.5 is very effective at attenuating this acquisition footprint. FK spectrum of inline 425 after filter Input Parameters ex_spatial_filter.py input parameters NAME DESCRIPTION Stepout Determines the size of the convolution operator. Minimum of 9 (filter kernel size of 19) recommended. Type Filter type - Low Pass, High Pass, Band Pass or Band Reject. Normalised Spatial Frequency For Low Pass and High Pass filters this specifies the filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point.",
            "title": "Spatial Filter - Circular",
            "url": "/OpendTect-Plugin-Docs/external_attributes/Spatial_Filter_Circular.html"
        },
        {
            "tags": "external-attribute",
            "text": "Script: Miscellaneous/ex_add_noise.py Description This Python ExternalAttrib - External Attribute script adds gaussian distributed noise to an input signal. Examples This example shows an input signal with different levels of added noise. Input with varying levels of added noise Input Parameters ex_add_noise.py input parameters NAME DESCRIPTION S/N Ratio Desired signal to noise ratio.",
            "title": "Add Noise",
            "url": "/OpendTect-Plugin-Docs/external_attributes/Add_Noise.html"
        },
        {
            "tags": "external-attribute structure",
            "text": "Description These Python ExternalAttrib - External Attribute scripts implement various algorithms to estimate orientation, ie dip or dip azimuth. All scripts will estimate at least the following attributes: OUTPUT DESCRIPTION Inline Dip Event dip observed on a crossline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger inline numbers producing positive dips. Crossline Dip Event dip observed on an inline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger crossline numbers producing positive dips. True Dip Event dip in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output is always positive. Dip Azimuth Azimuth of the True Dip direction relative to the survey orientation. Output ranges from -180 to 180 degrees. Positive azimuth is defined from the inline in the direction of increasing crossline numbers. Azimuth = 0 indicates that the dip is dipping in the direction of increasing crossline numbers. Azimuth = 90 indicates that the dip is dipping in the direction of increasing inline numbers. Some scripts may offer additional outputs such as a measure of event coherency or planarity. All of the scripts require the numba Python package. Orientation from gradients Script: ex_gradient_dip.py Calculates orientation from inline, crossline and Z gradients. No filtering is applied Unfiltered gradient dip - crossline dip on an inline Orientation from vector filtered gradients Script: ex_vf_gradient3_dip.py Uses Kroon's (2009) 3 point derivative filter to estimate data gradients. Next gradient normal unit vectors are determined and smoothed using a vector filter. NAME DESCRIPTION Output What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth. Z window (+/-samples) Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be $ (2*Zwindow+1) $. Stepout Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be $ (2*Stepout+1) $. Filter Choice of Mean Dip, L1 Vector Median or L2 Vector Median. The aperture of the vector filtering is $ (2*Zwindow-1) $ Z samples and $ (2*Stepout-1) $ samples in the inline and crossline direction. For example for a 5x5x5 analysis cube $(Zwindow=2, Stepout=2)$ the gradients and associated normal unit vectors are generated on a 3x3x3 cube and vector filtered. The outer samples are only used in the gradient calculation. Vector filtered gradient dip - crossline dip on an inline - 5x5x5 input Orientation by the gradient structure tensor Scripts: ex_gradient3_st_dip.py & ex_gradient5_st_dip.py Uses either Kroon's (2009) 3 point or the Farid and Simoncelli (2004) 5 point derivative filter to estimate data gradients which are then used to form the gradient structure tensor. NAME DESCRIPTION Output What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth. Z window (+/-samples) Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be $ (2\\*Zwindow+1) $. Stepout Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be $ (2\\*Stepout+1) $. For the ex_gradient3 script the structure tensor is formed from an aperture of $ (2*Zwindow-1) $ Z samples and $ (2*Stepout-1) $ samples in the inline and crossline direction. For the ex_gradient5 script the structure tensor is formed from an aperture of $ (2*Z_window-2) $ Z samples and $ (2*Stepout-2) $ samples in the inline and crossline direction. Gradient3 structure tensor dip - crossline dip on an inline - 5x5x5 input Orientation from the 3D complex trace phase Script: ex_phase3_dip.py Calculates orientation from the 3D complex trace phase gradients as per Barnes (2007) . Kroon's (2009) 3 point derivative filter is used to compute gradients. NAME DESCRIPTION Output What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth. Z window (+/-samples) Specifies the length $ (2*Zwindow+1) $ of the time domain operator used to generate the complex analytic signal (recommend >= 15) Band Specifies the proportion of the frequency band to include when generating the complex analytic signal (recommend 0.9). Unfiltered phase dip - crossline dip on an inline Orientation from vector filtered 3D complex trace phase Script: ex_vf_phase3_dip.py Calculate orientation unit normal vectors using the 3D complex trace phase gradient and apply a vector filter. Kroon's (2009) 3 point filter used to compute gradients. NAME DESCRIPTION Output What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth. Z window (+/-samples) Specifies the length $ (2*Zwindow+1) $ of the time domain operator used to generate the complex analytic signal (recommend >= 15) Stepout Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be $ (2*Stepout+1) $. Filter Choice of Mean Dip, L1 Vector Median or L2 Vector Median. Vector Filter ZStepOut Specifies the extent of the analysis cube for vector filtering in the Z direction. Number of Z samples in cube will be $ (2*ZStepOut+1) $. Band Specifies the proportion of the frequency band to include when generating the complex analytic signal (recommend 0.9). The aperture of the vector filter is $ (2*ZStepOut+1) $ Z samples and $ (2*Stepout-1) $ samples in the inline and crossline direction. Mean Vector Filtered phase dip - crossline dip on an inline - 3x3x3 Orientation using the envelope weighted 3D complex trace phase structure tensor Script: ex_weighted_phase3_st_dip.py Forms a structure tensor from the 3D complex trace phase gradients. Tensor elements are weighted by the trace envelope as per Luo etal (2006) . Kroon's (2009) 3 point filter is used to compute gradients. NAME DESCRIPTION Output What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth. Z window (+/-samples) Specifies the length $ (2*Zwindow+1) $ of the time domain operator used to generate the complex analytic signal (recommend >= 15) Stepout Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be $ (2*Stepout+1) $. Tensor ZStepOut Specifies the extent of the analysis cube for vector filtering in the Z direction. Number of Z samples in cube will be $ (2*ZStepOut+1) $. Band Specifies the proportion of the frequency band to include when generating the complex analytic signal (recommend 0.9). The aperture of the structure tensor is $ (2*ZStepOut+1) $ Z samples and $ (2*Stepout-1) $ samples in the inline and crossline direction. Structure tensor phase dip - crossline dip on an inline - 3x3x3 tensor input |",
            "title": "Dip and Azimuth",
            "url": "/OpendTect-Plugin-Docs/external_attributes/DipandAzimuth.html"
        },
        {
            "tags": "",
            "text": "ExternalAttrib - External Attribute GradientAttrib - Gradients AVOAttrib - AVO Attributes RSpecAttrib - Recursive Spectral Decomposition LTFAttrib - Spectral Decomposition by Local Attributes",
            "title": "plugin",
            "url": "/OpendTect-Plugin-Docs/tag/plugin/"
        },
        {
            "tags": "",
            "text": "Time Delay Estimation AVO Intercept and Gradient ZC Block Add Noise",
            "title": "external-attribute",
            "url": "/OpendTect-Plugin-Docs/tag/external-attribute/"
        },
        {
            "tags": "",
            "text": "LPA Smoothing Vector Filter Spatial Filter - Rectangular Spatial Filter - Circular",
            "title": "external-attribute filter",
            "url": "/OpendTect-Plugin-Docs/tag/external-attribute filter/"
        },
        {
            "tags": "",
            "text": "Dip and Azimuth",
            "title": "external-attribute structure",
            "url": "/OpendTect-Plugin-Docs/tag/external-attribute structure/"
        },
        {
            "tags": "",
            "text": "MLVFilterAttrib - Mean of Least Variance Filter",
            "title": "plugin filter",
            "url": "/OpendTect-Plugin-Docs/tag/plugin filter/"
        }
    ]
}