{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\nThis is the documentation site for various plugins  I have developed for the open source seismic interpretation system \nOpendTect\n. The plugins are made available under the terms of the \nGNU General Public License Version 3\n.\n\n\nPlugins\n\n\n\n\n\n\n\n\nPLUGIN\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nAVOAttrib\n\n\nSix attributes derived from reflection intercept and gradient\n\n\n\n\n\n\nExternalAttrib\n\n\nAttribute calculation outside OpendTect using an external process such as a python script\n\n\n\n\n\n\nGradientAttrib\n\n\nCalculation of inline, crossline and z gradient using rotationally invariant operators\n\n\n\n\n\n\nLTFAttrib\n\n\nLocal time-frequency decomposition (requires \nMadagascar\n - not available for Windows)\n\n\n\n\n\n\nMLVFilter\n\n\nStructure preserving filter\n\n\n\n\n\n\nRSpecAttrib\n\n\nRecursive time-frequency decomposition",
            "title": "Home"
        },
        {
            "location": "/#welcome",
            "text": "This is the documentation site for various plugins  I have developed for the open source seismic interpretation system  OpendTect . The plugins are made available under the terms of the  GNU General Public License Version 3 .",
            "title": "Welcome"
        },
        {
            "location": "/#plugins",
            "text": "PLUGIN  DESCRIPTION      AVOAttrib  Six attributes derived from reflection intercept and gradient    ExternalAttrib  Attribute calculation outside OpendTect using an external process such as a python script    GradientAttrib  Calculation of inline, crossline and z gradient using rotationally invariant operators    LTFAttrib  Local time-frequency decomposition (requires  Madagascar  - not available for Windows)    MLVFilter  Structure preserving filter    RSpecAttrib  Recursive time-frequency decomposition",
            "title": "Plugins"
        },
        {
            "location": "/Installation/download-binary/",
            "text": "Download Binary Distribution\n\n\nCompiled versions of the plugins for Linux x86_64 and Windows x86_64 are available for download at the links below. After download follow the \ninstallation instructions\n to put them to use.\n\n\nOpendTect Version 6\n\n\n\n\n\n\n\n\nOS\n\n\nLATEST\n\n\nOTHER\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n \n \n\n\nOn Bintray\n\n\n\n\n\n\nWindows\n\n\n \n \n\n\nOn Bintray\n\n\n\n\n\n\n\n\nOpendTect Version 5\n\n\n\n\n\n\n\n\nOS\n\n\nLATEST\n\n\nOTHER\n\n\n\n\n\n\n\n\n\n\nLinux\n\n\n \n \n\n\nOn Bintray\n\n\n\n\n\n\nWindows\n\n\n \n \n\n\nOn Bintray\n\n\n\n\n\n\n\n\nOpendTect Version 4",
            "title": "Download"
        },
        {
            "location": "/Installation/download-binary/#download-binary-distribution",
            "text": "Compiled versions of the plugins for Linux x86_64 and Windows x86_64 are available for download at the links below. After download follow the  installation instructions  to put them to use.",
            "title": "Download Binary Distribution"
        },
        {
            "location": "/Installation/download-binary/#opendtect-version-6",
            "text": "OS  LATEST  OTHER      Linux       On Bintray    Windows       On Bintray",
            "title": "OpendTect Version 6"
        },
        {
            "location": "/Installation/download-binary/#opendtect-version-5",
            "text": "OS  LATEST  OTHER      Linux       On Bintray    Windows       On Bintray",
            "title": "OpendTect Version 5"
        },
        {
            "location": "/Installation/download-binary/#opendtect-version-4",
            "text": "",
            "title": "OpendTect Version 4"
        },
        {
            "location": "/Installation/installation/",
            "text": "Installation\n\n\nFor both Linux and Windows there are 2 alternatives, site wide installation or per-user installation.\n\n\nLinux\n\n\nSitewide Installation\n\n\nTo install the plugins into the OpendTect program folder (eg \n/opt/seismic/OpendTect/5.0/ \n):\n\n\n\n\n\n\nCopy the contents of the \nbin/lux64/Release/\n folder in the tgz file to \n/opt/seismic/OpendTect/5.0.0/bin/lux64/Release/\n;\n\n\n\n\n\n\nCopy the contents of the \nplugins/lux64/\n folder in the tgz file to \n/opt/Seismic/OpendTect/5.0.0/plugins/lux64/\n; and\n\n\n\n\n\n\nRestart OpendTect.\n\n\n\n\n\n\nPer-user Installation\n\n\nOn Linux it is also possible to install the plugin files in a users \n.od\n folder. Note that the OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. See the \nFAQ\n for a workaround if you want to use this method of installation and want to run both versions of OpendTect.\n\n\n\n\n\n\nCopy the contents of the \nbin/lux64/Release/\n folder in the tgz file to the users \n.od/bin/lux64/Release/\n folder;\n\n\n\n\n\n\nCopy the contents of the \nplugins/lux64/\n folder in the tgz file to the users \n.od/plugins/lux64/\n folder; and\n\n\n\n\n\n\nRestart OpendTect.\n\n\n\n\n\n\nWindows\n\n\nSitewide Installation\n\n\nTo install the plugins into the OpendTect program folder (eg \nc:\\Program Files\\opendtect\\ \n):\n\n\n\n\n\n\nCopy the contents of the \nbin\\win64\\Release\\ \n folder in the zip file to \nc:\\Program Files\\opendtect\\bin\\win64\\Release\\ \n;\n\n\n\n\n\n\nCopy the contents of the \nplugins\\win64\\ \n folder in the zip file to \nc:\\Program Files\\opendtect\\plugins\\win64\\ \n; and\n\n\n\n\n\n\nRestart OpendTect.\n\n\n\n\n\n\nPer-user Installation\n\n\nOn Windows it is also possible to install the plugin files in a users \n.od\n folder. Note that the OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. See the \nFAQ\n for a workaround if you want to use this method of installation and want to run both versions of OpendTect.\n\n\n\n\n\n\nCopy the contents of the \nbin\\win64\\Release\\ \n folder in the zip file to the users \nC:\\Users\\%username%\\.od\\bin\\win64\\Release\\ \n folder;\n\n\n\n\n\n\nCopy the contents of the \nplugins\\win64\\ \n folder in the zip file to the users \nC:\\Users\\%username%\\.od\\plugin\\win64\\ \n folder; and\n\n\n\n\n\n\nRestart OpendTect.",
            "title": "Install"
        },
        {
            "location": "/Installation/installation/#installation",
            "text": "For both Linux and Windows there are 2 alternatives, site wide installation or per-user installation.",
            "title": "Installation"
        },
        {
            "location": "/Installation/installation/#linux",
            "text": "",
            "title": "Linux"
        },
        {
            "location": "/Installation/installation/#sitewide-installation",
            "text": "To install the plugins into the OpendTect program folder (eg  /opt/seismic/OpendTect/5.0/  ):    Copy the contents of the  bin/lux64/Release/  folder in the tgz file to  /opt/seismic/OpendTect/5.0.0/bin/lux64/Release/ ;    Copy the contents of the  plugins/lux64/  folder in the tgz file to  /opt/Seismic/OpendTect/5.0.0/plugins/lux64/ ; and    Restart OpendTect.",
            "title": "Sitewide Installation"
        },
        {
            "location": "/Installation/installation/#per-user-installation",
            "text": "On Linux it is also possible to install the plugin files in a users  .od  folder. Note that the OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. See the  FAQ  for a workaround if you want to use this method of installation and want to run both versions of OpendTect.    Copy the contents of the  bin/lux64/Release/  folder in the tgz file to the users  .od/bin/lux64/Release/  folder;    Copy the contents of the  plugins/lux64/  folder in the tgz file to the users  .od/plugins/lux64/  folder; and    Restart OpendTect.",
            "title": "Per-user Installation"
        },
        {
            "location": "/Installation/installation/#windows",
            "text": "",
            "title": "Windows"
        },
        {
            "location": "/Installation/installation/#sitewide-installation_1",
            "text": "To install the plugins into the OpendTect program folder (eg  c:\\Program Files\\opendtect\\  ):    Copy the contents of the  bin\\win64\\Release\\   folder in the zip file to  c:\\Program Files\\opendtect\\bin\\win64\\Release\\  ;    Copy the contents of the  plugins\\win64\\   folder in the zip file to  c:\\Program Files\\opendtect\\plugins\\win64\\  ; and    Restart OpendTect.",
            "title": "Sitewide Installation"
        },
        {
            "location": "/Installation/installation/#per-user-installation_1",
            "text": "On Windows it is also possible to install the plugin files in a users  .od  folder. Note that the OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. See the  FAQ  for a workaround if you want to use this method of installation and want to run both versions of OpendTect.    Copy the contents of the  bin\\win64\\Release\\   folder in the zip file to the users  C:\\Users\\%username%\\.od\\bin\\win64\\Release\\   folder;    Copy the contents of the  plugins\\win64\\   folder in the zip file to the users  C:\\Users\\%username%\\.od\\plugin\\win64\\   folder; and    Restart OpendTect.",
            "title": "Per-user Installation"
        },
        {
            "location": "/Installation/building-from-source/",
            "text": "Building from Source\n\n\nLinux\n\n\nThese instructions are for Linux. Some of the attributes won't build (eg \nLTFAttrib\n)unless Madagascar is installed.\n\n\n\n\nDownload the source for the plugins for the appropriate version of OpendTect from Github\n\n\nOpendTect v5+\n\n\n\n\nOpendTect v4\n\n\n\n\n\n\nUse the OpendTect installation manager to install the OpendTect developer packages and install any other packages required for compiling and building code for your operating environment as per the \nOpendTect Programmer's Manual\n\n\n\n\n\n\nStart OpendTect\n\n\n\n\n\n\nSelect the \nUtilities-Tools-Create Plugin Devel. Env.\n menu item to create a development work folder (eg /home/user/ODWork).\n\n\n\n\n\n\nUnzip the attribute source zip archive downloaded in step 1 in the development work folder. This will overwrite the \nCMakeLists.txt\n in the development work folder and add the plugin source folders to the plugin folder.\n\n\n\n\n\n\nOptionally edit \nCMakeCache.txt\n in the development work folder and change Debug to Release.\n\n\n\n\n\n\nOptionally set the environment variable pointing to your Madagascar install\n\n\n\n\n\n\n    export RSFROOT=/opt/OpendTect_4/4.6.0/Madagascar\n\n\n\n\n\n\nOpen a terminal, cd to the development work folder and type:\n\n\n\n\n    cmake .\n    make\n\n\n\n\n\n\nThis should create the binary files for each plugin, lib*.so and libui*.so, in the bin folder (eg in ODWork/bin/lux64/Release/) and four *.alo files for each plugin in the root of the development work folder.\n\n\n\n\nIf you don't have Madagascar installed or RSFROOT is not set the plugins that depend on the Madagascar libraries (eg LTFAttrib) won't build and there will be error messages. These error messages can be ignored if you don't want the Madagascar dependent attributes.\n\n\nWindows\n\n\nThese instructions are for Windows. Note that the attributes that require Madagascar (eg \nLTFAttrib\n) cannot be built on Windows.\n\n\n\n\nDownload the source for the plugins for the appropriate version of OpendTect from Github\n\n\nOpendTect v5+\n\n\n\n\nOpendTect v4\n\n\n\n\n\n\nUse the OpendTect installation manager to install the OpendTect developer packages and install any other packages required for compiling and building code for your operating environment as per the \nOpendTect Programmer's Manual\n\n\n\n\n\n\nStart OpendTect\n\n\n\n\n\n\nSelect the \nUtilities-Tools-Create Plugin Devel. Env.\n menu item to create a development work folder (eg c:\\Users\\user\\ODWork).\n\n\n\n\n\n\nUnzip the attribute source zip archive downloaded in step 1 in the development work folder. This will overwrite the \nCMakeLists.txt\n in the development work folder and add the plugin source folders to the plugin folder.\n\n\n\n\n\n\nFollow the instructions in the \nOpendTect Programmer's Manual\n to configure and build the plugins.\n\n\n\n\n\n\nThis should create the binary files for each plugin in the bin folder (eg in ODWork\\bin\\win64\\Release).\n\n\n\n\n\n\nOn Windows you must use \"Release\" build plugins with the \"Release\" version of OpendTect.",
            "title": "Build from source"
        },
        {
            "location": "/Installation/building-from-source/#building-from-source",
            "text": "",
            "title": "Building from Source"
        },
        {
            "location": "/Installation/building-from-source/#linux",
            "text": "These instructions are for Linux. Some of the attributes won't build (eg  LTFAttrib )unless Madagascar is installed.   Download the source for the plugins for the appropriate version of OpendTect from Github  OpendTect v5+   OpendTect v4    Use the OpendTect installation manager to install the OpendTect developer packages and install any other packages required for compiling and building code for your operating environment as per the  OpendTect Programmer's Manual    Start OpendTect    Select the  Utilities-Tools-Create Plugin Devel. Env.  menu item to create a development work folder (eg /home/user/ODWork).    Unzip the attribute source zip archive downloaded in step 1 in the development work folder. This will overwrite the  CMakeLists.txt  in the development work folder and add the plugin source folders to the plugin folder.    Optionally edit  CMakeCache.txt  in the development work folder and change Debug to Release.    Optionally set the environment variable pointing to your Madagascar install        export RSFROOT=/opt/OpendTect_4/4.6.0/Madagascar   Open a terminal, cd to the development work folder and type:       cmake .\n    make   This should create the binary files for each plugin, lib*.so and libui*.so, in the bin folder (eg in ODWork/bin/lux64/Release/) and four *.alo files for each plugin in the root of the development work folder.   If you don't have Madagascar installed or RSFROOT is not set the plugins that depend on the Madagascar libraries (eg LTFAttrib) won't build and there will be error messages. These error messages can be ignored if you don't want the Madagascar dependent attributes.",
            "title": "Linux"
        },
        {
            "location": "/Installation/building-from-source/#windows",
            "text": "These instructions are for Windows. Note that the attributes that require Madagascar (eg  LTFAttrib ) cannot be built on Windows.   Download the source for the plugins for the appropriate version of OpendTect from Github  OpendTect v5+   OpendTect v4    Use the OpendTect installation manager to install the OpendTect developer packages and install any other packages required for compiling and building code for your operating environment as per the  OpendTect Programmer's Manual    Start OpendTect    Select the  Utilities-Tools-Create Plugin Devel. Env.  menu item to create a development work folder (eg c:\\Users\\user\\ODWork).    Unzip the attribute source zip archive downloaded in step 1 in the development work folder. This will overwrite the  CMakeLists.txt  in the development work folder and add the plugin source folders to the plugin folder.    Follow the instructions in the  OpendTect Programmer's Manual  to configure and build the plugins.    This should create the binary files for each plugin in the bin folder (eg in ODWork\\bin\\win64\\Release).    On Windows you must use \"Release\" build plugins with the \"Release\" version of OpendTect.",
            "title": "Windows"
        },
        {
            "location": "/Installation/faq/",
            "text": "FAQ\n\n\nBuilding plugins that require Madagascar\n\n\nTo build plugins that use the Madagascar libraries (eg LTFAttrib) you need to set the RSFROOT environment variable before building the plugins.\n\n\n    export RSFROOT=/opt/OpendTect_4/4.6.0/Madagascar\n    cmake.\n    make\n\n\n\n\nPlugins not loading\n\n\n\n\n\n\nTry manually loading the plugin.\n\n\n\n\n\n\nCheck the OpendTect log file for error messages and see if there is already a solution outlined elsewhere in this page.\n\n\n\n\n\n\nOpen an \nissue\n on GitHub.\n\n\n\n\n\n\nPer-user Installation and Multiple OpendTect versions\n\n\nThe OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. There are a couple of ways you can have access to plugins for both versions of OpendTect.\n\n\nUse the OD_USER_PLUGIN_DIR environment variable\n\n\nThis is the preferred option because it allows the same application settings files to be shared by both versions of OpendTect.\n\n\nFor Windows\n\n\n\n\n\n\nCreate \nod5\n and \nod4\n folders in the C:\\Users\\ \nusername\n folder\n\n\n\n\n\n\nInstall the OpendTect-4-plugins in the \nod4\n folder and the OpendTect-5-plugins in the \nod5\n folder as per the \ninstallation instructions\n.\n\n\n\n\n\n\nCreate a \"bat\" file to start each version of OpendTect that sets the \nOD_USER_PLUGIN_DIR\n environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.bat might look like:\n\n\n\n\n\n\n@set OD_USER_PLUGIN_DIR=%HOMEPATH%\\od5\nstart \"\" \"C:\\Program Files\\OpendTect_5\\5.0.0\\bin\\win64\\Release\\od_start_dtect.exe\"\n\n\n\n\nFor Linux\n\n\n\n\nCreate \n.od5\n and \n.od4\n folders in the users home directory\n\n\n\n\n    mkdir ~/.od5 \n    mkdir ~/.od4\n\n\n\n\n\n\n\n\nInstall the OpendTect-4-plugins in the users \n.od4\n folder and the OpendTect-5-plugins in the \n.od5\n folder as per the \ninstallation instructions\n.\n\n\n\n\n\n\nCreate executable shell scripts to start each version of OpendTect that sets the \nOD_USER_PLUGIN_DIR\n to the appropriate folder before starting OpendTect. Here is what odt_5.csh might look like:\n\n\n\n\n\n\n    #!/bin/csh -f\n    setenv OD_USER_PLUGIN_DIR \"$HOME/.od5\"\n    /path to OpendTect 5/start_dtect\n\n\n\n\nHave 2 user settings folders\n\n\nFor Windows\n\n\n\n\n\n\nCopy the users existing \n.od\n folder to \n.od5\n\n\n\n\n\n\nInstall the OpendTect-4-plugins in the \n.od\n folder and the OpendTect-5-plugins in the \n.od5\n folder as per the \ninstallation instructions\n.\n\n\n\n\n\n\nCreate a \"bat\" file to start OpendTect 5  that sets the \nDTECT_SETTINGS\n environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.bat might look like:\n\n\n\n\n\n\n@set DTECT_SETTINGS=%HOMEPATH%\\.od5\nstart \"\" \"C:\\Program Files\\OpendTect_5\\5.0.0\\bin\\win64\\Release\\od_start_dtect.exe\"\n\n\n\n\nFor Linux\n\n\n\n\n\n\nCopy the users existing \n.od\n folder to \n.od5\n\n\n\n\n\n\nInstall the OpendTect-4-plugins in the \n.od\n folder and the OpendTect-5-plugins in the \n.od5\n folder as per the \ninstallation instructions\n.\n\n\n\n\n\n\nCreate an executable shell script to start OpendTect 5 that sets the \nDTECT_SETTINGS\n environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.csh might look like:\n\n\n\n\n\n\n    #!/bin/csh -f\n\n    setenv DTECT_SETTINGS \"$HOME/.od5\"\n    /path to OpendTect 5/start_dtect\n\n\n\n\nlibstdc++.so.6: version 'GLIBCXX_3.4.??' not found\n\n\nThis happens when the plugin is built with a gcc version different to the version used to build OpendTect. Solutions are: \n\n\n\n\n\n\n(Easy and seems to work ok but could break something) Rename the libstdc++.so.6 file in the OpendTect installation bin/lux64 folder to say old_libstdc++.so.6 and restart OpendTect.\n\n\n\n\n\n\n(Hard) Install the same version of gcc that OpendTect was built with and rebuild the plugin.\n\n\n\n\n\n\n(Hardest) Build OpendTect from source using your installed gcc.",
            "title": "Issues/FAQ"
        },
        {
            "location": "/Installation/faq/#faq",
            "text": "",
            "title": "FAQ"
        },
        {
            "location": "/Installation/faq/#building-plugins-that-require-madagascar",
            "text": "To build plugins that use the Madagascar libraries (eg LTFAttrib) you need to set the RSFROOT environment variable before building the plugins.      export RSFROOT=/opt/OpendTect_4/4.6.0/Madagascar\n    cmake.\n    make",
            "title": "Building plugins that require Madagascar"
        },
        {
            "location": "/Installation/faq/#plugins-not-loading",
            "text": "Try manually loading the plugin.    Check the OpendTect log file for error messages and see if there is already a solution outlined elsewhere in this page.    Open an  issue  on GitHub.",
            "title": "Plugins not loading"
        },
        {
            "location": "/Installation/faq/#per-user-installation-and-multiple-opendtect-versions",
            "text": "The OpendTect-4-plugins won't work in OpendTect 5+ and the OpendTect-5-plugins won't work in OpendTect 4. There are a couple of ways you can have access to plugins for both versions of OpendTect.",
            "title": "Per-user Installation and Multiple OpendTect versions"
        },
        {
            "location": "/Installation/faq/#use-the-od_user_plugin_dir-environment-variable",
            "text": "This is the preferred option because it allows the same application settings files to be shared by both versions of OpendTect.",
            "title": "Use the OD_USER_PLUGIN_DIR environment variable"
        },
        {
            "location": "/Installation/faq/#for-windows",
            "text": "Create  od5  and  od4  folders in the C:\\Users\\  username  folder    Install the OpendTect-4-plugins in the  od4  folder and the OpendTect-5-plugins in the  od5  folder as per the  installation instructions .    Create a \"bat\" file to start each version of OpendTect that sets the  OD_USER_PLUGIN_DIR  environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.bat might look like:    @set OD_USER_PLUGIN_DIR=%HOMEPATH%\\od5\nstart \"\" \"C:\\Program Files\\OpendTect_5\\5.0.0\\bin\\win64\\Release\\od_start_dtect.exe\"",
            "title": "For Windows"
        },
        {
            "location": "/Installation/faq/#for-linux",
            "text": "Create  .od5  and  .od4  folders in the users home directory       mkdir ~/.od5 \n    mkdir ~/.od4    Install the OpendTect-4-plugins in the users  .od4  folder and the OpendTect-5-plugins in the  .od5  folder as per the  installation instructions .    Create executable shell scripts to start each version of OpendTect that sets the  OD_USER_PLUGIN_DIR  to the appropriate folder before starting OpendTect. Here is what odt_5.csh might look like:        #!/bin/csh -f\n    setenv OD_USER_PLUGIN_DIR \"$HOME/.od5\"\n    /path to OpendTect 5/start_dtect",
            "title": "For Linux"
        },
        {
            "location": "/Installation/faq/#have-2-user-settings-folders",
            "text": "",
            "title": "Have 2 user settings folders"
        },
        {
            "location": "/Installation/faq/#for-windows_1",
            "text": "Copy the users existing  .od  folder to  .od5    Install the OpendTect-4-plugins in the  .od  folder and the OpendTect-5-plugins in the  .od5  folder as per the  installation instructions .    Create a \"bat\" file to start OpendTect 5  that sets the  DTECT_SETTINGS  environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.bat might look like:    @set DTECT_SETTINGS=%HOMEPATH%\\.od5\nstart \"\" \"C:\\Program Files\\OpendTect_5\\5.0.0\\bin\\win64\\Release\\od_start_dtect.exe\"",
            "title": "For Windows"
        },
        {
            "location": "/Installation/faq/#for-linux_1",
            "text": "Copy the users existing  .od  folder to  .od5    Install the OpendTect-4-plugins in the  .od  folder and the OpendTect-5-plugins in the  .od5  folder as per the  installation instructions .    Create an executable shell script to start OpendTect 5 that sets the  DTECT_SETTINGS  environment variable to the appropriate folder before starting OpendTect. Here is what odt_5.csh might look like:        #!/bin/csh -f\n\n    setenv DTECT_SETTINGS \"$HOME/.od5\"\n    /path to OpendTect 5/start_dtect",
            "title": "For Linux"
        },
        {
            "location": "/Installation/faq/#libstdcso6-version-glibcxx_34-not-found",
            "text": "This happens when the plugin is built with a gcc version different to the version used to build OpendTect. Solutions are:     (Easy and seems to work ok but could break something) Rename the libstdc++.so.6 file in the OpendTect installation bin/lux64 folder to say old_libstdc++.so.6 and restart OpendTect.    (Hard) Install the same version of gcc that OpendTect was built with and rebuild the plugin.    (Hardest) Build OpendTect from source using your installed gcc.",
            "title": "libstdc++.so.6: version 'GLIBCXX_3.4.??' not found"
        },
        {
            "location": "/Attributes/AVOAttrib/",
            "text": "AVOAttrib\n\n\nAVO attribute plugin for the open source seismic interpretation platform \nOpendTect\n - calculates 6 attributes based on different parameterizations of reflection intercept and gradient.\n\n\nDescription\n\n\nThe intercept-gradient crossplot is widely used for amplitude-variation-with-offset (AVO) analysis in hydrocarbon exploration.  The intercept is the zero offset or normal incidence reflection amplitude/coefficient of an event while the gradient is the change in reflection amplitude/coefficient with offset at normal incidence. Some authors refer to intercept as A or P and gradient as B or G. Modelling studies show that changes in subsurface rock properties such as lithology, porosity and pore fluid content result in systematic changes in intercept-gradient space. The following figure, adapted from the very informative paper on AVO by \nFoster etal (2010)\n, illustrates the ideal intercept-gradient crossplot response for a clastic sequence to changes in porosity and pore fluid. The Fluid Line or Background Trend is where reflections from shales and some wet sands that have little contrast in Vp/Vs plot.\n\n\n\n\nAnother popular classification of AVO effects on the intercept-gradient crossplot is the 3 class AVO scheme of \nRutherford and Williams (1989)\n based on acoustic impedance contrasts with the addition of a 4th class for high porosity gas sands introduced by \nCastagna and Swan (1997)\n. The position of these 4 AVO classes on the intercept-gradient crossplot is shown in the following figure.\n\n\n\n\nThis plugin calculates 6 attributes which are essentially just coordinate transformations of the intercept and gradient that aim to highlight changes of a particular rock property based on the expected behaviour of pore fluid changes in clastic reservoir sequences.\n\n\n\n\n\n\n\n\nATTRIBUTE\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nFluid Factor\n \n \n\n\nFluid Factor is a reprojection of intercept/gradient coordinates that highlights deviation from the Fluid Line. As the name implies this attribute highlights changes related to fluid compressibility. The Fluid Factor was introduced by \nSmith and Gidlow (1987)\n.\n\n\n\n\n\n\nLithology Factor\n \n  \n\n\nLithology Factor is the companion coordinate reprojection to Fluid Factor. It highlights changes parallel to the Fluid Line.{: style=\"width:60%\"}\n\n\n\n\n\n\nPorosity Factor\n \n  \n\n\nPorosity Factor is just Lithology Factor with the values above the fluid line reversed so the attribute magnitude always increases in the same sense as the effect of increasing porosity, i.e. the attribute magnitude increases to the upper left below the Fluid Line and to the lower right above the Fluid Line.\n\n\n\n\n\n\nCrossplot Angle\n \n \n\n\nCrossplot Angle is the angle between an intercept-gradient point and the Fluid Line. It runs from 0 to 180 below the Fluid Line measured counter-clockwise from the upper left projection of the Fluid Line. It runs from 0 to -180 above the Fluid Line measured counter-clockwise from the lower right projection of the Fluid Line. The Crossplot Angle and Deviation can be interpreted as the polar coordinates of a data point in the intercept-gradient crossplot space.\n\n\n\n\n\n\nCrossplot Deviation\n \n \n\n\nCrossplot Deviation is the distance from the crossplot origin. This attribute is most useful as a transparency mask to remove data close to the centre of the crossplot.\n\n\n\n\n\n\nAVO Class\n \n \n\n\nAVO Class classifies intercept-gradient points according to the 4 class AVO scheme of Rutherford and Williams (1989) and Castagna and Swan (1997). Points below the Fluid Line have a positive class number and those above have a negative class number.\n\n\n\n\n\n\n\n\nInput Parameters\n\n\nThese attributes have 4 required parameters and 4 extra parameters that may be required depending on the attribute being calculated:\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nIntercept Volume\n\n\nThe attribute volume to use as the zero offset or normal incidence reflection amplitude/coefficient. If no intercept volume is available a near angle or offset stack can be used as an alternative.\n\n\n\n\n\n\nGradient Volume\n\n\nThe attribute volume to use as the change in reflection amplitude/coefficient with offset at normal incidence. If no gradient volume is available, the difference between amplitudes on far and near angle or offset stacks can be used as an alternative.\n\n\n\n\n\n\nOutput\n\n\nThe attribute to calculate. There is a choice of Fluid Factor, Lithology Factor, Porosity Factor, Crossplot Angle, Crossplot Deviation or AVO Class.\n\n\n\n\n\n\nCrossplot Slope\n\n\nThe slope of the fluid line interpreted on the intercept-gradient crossplot. This can be read from the properties dialog of the crossplot tool.\n\n\n\n\n\n\nIntercept Standard Deviation (Optional)\n\n\nStandard deviation of the intercept volume. Only required for the Crossplot Angle and Crossplot Deviation attributes. This can be read from the 1D histogram tool in the crossplot table.\n\n\n\n\n\n\nGradient Standard Deviation (Optional)\n\n\nStandard deviation of the gradient volume. Only required for the Crossplot Angle and Crossplot Deviation attributes. This can be read from the 1D histogram tool in the crossplot table.\n\n\n\n\n\n\nCorrelation Coefficient (Optional)\n\n\nCorrelation coefficient between the intercept and gradient volumes. Only required for the Crossplot Deviation attribute. This can be read from the properties dialog of the crossplot tool.\n\n\n\n\n\n\nClass 2 Intercept Offset\n\n\nHalf width in intercept coordinates of the Class 2 region on the AVO Class crossplot. Only required for the AVO Class attribute.",
            "title": "AVO attributes"
        },
        {
            "location": "/Attributes/AVOAttrib/#avoattrib",
            "text": "AVO attribute plugin for the open source seismic interpretation platform  OpendTect  - calculates 6 attributes based on different parameterizations of reflection intercept and gradient.",
            "title": "AVOAttrib"
        },
        {
            "location": "/Attributes/AVOAttrib/#description",
            "text": "The intercept-gradient crossplot is widely used for amplitude-variation-with-offset (AVO) analysis in hydrocarbon exploration.  The intercept is the zero offset or normal incidence reflection amplitude/coefficient of an event while the gradient is the change in reflection amplitude/coefficient with offset at normal incidence. Some authors refer to intercept as A or P and gradient as B or G. Modelling studies show that changes in subsurface rock properties such as lithology, porosity and pore fluid content result in systematic changes in intercept-gradient space. The following figure, adapted from the very informative paper on AVO by  Foster etal (2010) , illustrates the ideal intercept-gradient crossplot response for a clastic sequence to changes in porosity and pore fluid. The Fluid Line or Background Trend is where reflections from shales and some wet sands that have little contrast in Vp/Vs plot.   Another popular classification of AVO effects on the intercept-gradient crossplot is the 3 class AVO scheme of  Rutherford and Williams (1989)  based on acoustic impedance contrasts with the addition of a 4th class for high porosity gas sands introduced by  Castagna and Swan (1997) . The position of these 4 AVO classes on the intercept-gradient crossplot is shown in the following figure.   This plugin calculates 6 attributes which are essentially just coordinate transformations of the intercept and gradient that aim to highlight changes of a particular rock property based on the expected behaviour of pore fluid changes in clastic reservoir sequences.     ATTRIBUTE  DESCRIPTION      Fluid Factor      Fluid Factor is a reprojection of intercept/gradient coordinates that highlights deviation from the Fluid Line. As the name implies this attribute highlights changes related to fluid compressibility. The Fluid Factor was introduced by  Smith and Gidlow (1987) .    Lithology Factor       Lithology Factor is the companion coordinate reprojection to Fluid Factor. It highlights changes parallel to the Fluid Line.{: style=\"width:60%\"}    Porosity Factor       Porosity Factor is just Lithology Factor with the values above the fluid line reversed so the attribute magnitude always increases in the same sense as the effect of increasing porosity, i.e. the attribute magnitude increases to the upper left below the Fluid Line and to the lower right above the Fluid Line.    Crossplot Angle      Crossplot Angle is the angle between an intercept-gradient point and the Fluid Line. It runs from 0 to 180 below the Fluid Line measured counter-clockwise from the upper left projection of the Fluid Line. It runs from 0 to -180 above the Fluid Line measured counter-clockwise from the lower right projection of the Fluid Line. The Crossplot Angle and Deviation can be interpreted as the polar coordinates of a data point in the intercept-gradient crossplot space.    Crossplot Deviation      Crossplot Deviation is the distance from the crossplot origin. This attribute is most useful as a transparency mask to remove data close to the centre of the crossplot.    AVO Class      AVO Class classifies intercept-gradient points according to the 4 class AVO scheme of Rutherford and Williams (1989) and Castagna and Swan (1997). Points below the Fluid Line have a positive class number and those above have a negative class number.",
            "title": "Description"
        },
        {
            "location": "/Attributes/AVOAttrib/#input-parameters",
            "text": "These attributes have 4 required parameters and 4 extra parameters that may be required depending on the attribute being calculated:     NAME  DESCRIPTION      Intercept Volume  The attribute volume to use as the zero offset or normal incidence reflection amplitude/coefficient. If no intercept volume is available a near angle or offset stack can be used as an alternative.    Gradient Volume  The attribute volume to use as the change in reflection amplitude/coefficient with offset at normal incidence. If no gradient volume is available, the difference between amplitudes on far and near angle or offset stacks can be used as an alternative.    Output  The attribute to calculate. There is a choice of Fluid Factor, Lithology Factor, Porosity Factor, Crossplot Angle, Crossplot Deviation or AVO Class.    Crossplot Slope  The slope of the fluid line interpreted on the intercept-gradient crossplot. This can be read from the properties dialog of the crossplot tool.    Intercept Standard Deviation (Optional)  Standard deviation of the intercept volume. Only required for the Crossplot Angle and Crossplot Deviation attributes. This can be read from the 1D histogram tool in the crossplot table.    Gradient Standard Deviation (Optional)  Standard deviation of the gradient volume. Only required for the Crossplot Angle and Crossplot Deviation attributes. This can be read from the 1D histogram tool in the crossplot table.    Correlation Coefficient (Optional)  Correlation coefficient between the intercept and gradient volumes. Only required for the Crossplot Deviation attribute. This can be read from the properties dialog of the crossplot tool.    Class 2 Intercept Offset  Half width in intercept coordinates of the Class 2 region on the AVO Class crossplot. Only required for the AVO Class attribute.",
            "title": "Input Parameters"
        },
        {
            "location": "/Attributes/ExternalAttrib/",
            "text": "ExternalAttrib\n\n\nDescription\n\n\nThis is an attribute plugin for the open source seismic interpretation platform \nOpendTect\n - that allows the calculation of single and multitrace attributes outside of OpendTect by a user specified external application. The plugin supports multi-trace multi-attribute input and multi-attribute output as well as parallel execution.\n\n\nNOTE:\n \nReleases prior to 6.0.2 allowed multi-trace multi-attribute input only if all the attributes were in the same multi-attribute volume. In releases from 6.0.2 onward this limitation has been removed.\n\n\nInstead of doing the attribute calculation within OpendTect this plugin starts up a user specified external application and then reads and writes the trace data to/from the external application's stdin and stdout. The external application must conform to some \nsimple rules\n but could be written in any programming language, compiled or interpreted. This essentially means you can write a new OpendTect attribute in your computer language of choice and not have to delve into the internals of OpendTect.\n\n\nA reference implementation for writing external attributes in Python/Numpy (version 3) is available. This consists of a module \nextattrib.py\n that handles the stdin/stdout details and presents the trace data as a numpy array. \n\n\nThere is a \nrepository of External Attribute scripts\n for everything from dip estimation to filtering described in the \nExternal Attributes\n section of this documentation.\n\n\nInput Parameters\n\n\nThis attribute has 3 required parameters and up to 9 optional parameters determined by the \nJSON parameter string\n provided by the external attribute script:\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nInterpreter\n\n\nFor external attributes written in a scripted language this field specifies the location of the  interpreter required to run the script, eg /usr/bin/python3\n\n\n\n\n\n\nExternal File\n\n\nThe external application to be used for attribute calculation.\n\n\n\n\n\n\nInput\n\n\nThe input attribute to use\n\n\n\n\n\n\n\n\n   \n\n\nCross Platform Setup\n\n\nPrior to release 5.10 and 6.0.0pre7-1 any attribute set containing external attributes could not be shared between Windows and Linux because the Interpeter and External File input fields contain platform specific file paths.\n\n\nRelease 5.10 and 6.0.0pre7-1 introduced an optional mechanism to support cross platform attribute sets containing external attributes by using environment variables. Consider the following script for starting OpendTect on Linux:\n\n\n#!/bin/csh -f\nsetenv DTECT_SETTINGS \"$HOME/.od6\"\nsetenv OD_USER_PLUGIN_DIR \"$HOME/.od6\"\nsetenv EX_PYTHON \"/opt/anaconda3/bin/python\"\nsetenv OD_EX_DIR \"$HOME/Development/GIT_AREA/OpendTect-External-Attributes/\"\n/opt/seismic/OpendTect_6/6.0.0/start_dtect \n\n\n\n\nAnd an equivalent Windows command file:\n\n\n@set OD_USER_PLUGIN_DIR=%HOMEPATH%\\od6\n@set EX_PYTHON=C:\\Miniconda3\\python.exe\n@set OD_EX_DIR=E:\\Development\\GIT_AREA\\OpendTect-External-Attributes\\\nstart \"\" \"C:\\Program Files\\OpendTect_6\\6.0.0\\bin\\win64\\Release\\od_start_dtect.exe\"\n\n\n\n\nThe environment variable EX_PYTHON points to the python interpreter for each platform and entering %EX_PYTHON% into the Interpreter input field ensures the platform appropriate interpreter is used. Any name can be used for the environment variable.\n\n\nThe  environment variable OD_EX_DIR points to a root folder below which the attribute script files can be found. The setting in the Linux startup script points to a Linux folder. The corresponding setting in the Windows command file points to the same location via a network share. This environment variable name is hard wired into the code so this variable name cannot be changed. Note that the script files cam be located in subfolders of the OD_EX_DIR folder.\n\n\nThis type of setup produces attribute set descriptions like this:\n\n\n7.Definition: ExternalAttrib interpfile=%EX_PYTHON% exfile=%OD_EX_DIR%tests/ex_ui_test_all.py zmargin=[-1,1] stepout=1,1 selection=2 par0=0 par1=1 par2=2 par3=3 par4=4 par5=5 output=0\n\n\n\n\nwhich can be used on either platform without change.\n\n\nAttribute sets created by release 5.0.10 and 6.0.0pre7-1 and later that use these environment variables will not work in earlier versions of the External Attribute plugin.\n\n\nAttribute JSON Parameter String\n\n\nThe external application can specify a set of parameters as a JSON object string. The following keywords are supported:\n\n\n\n\n\n\n\n\nJSON KEYWORD\n\n\nInput (depreciated)\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nString\n\n\n\n\n\n\nDESCRIPTION\n\n\nSpecifies a label to appear beside the input attribute selection UI element. \nSuperceded by the \"Inputs\" keyword but is supported for backward compatibility.\n\n\n\n\n\n\nEXAMPLE\n\n\n'Input': 'Input Data'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON KEYWORD\n\n\nInputs\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nArray of Strings\n\n\n\n\n\n\nDESCRIPTION\n\n\nEach string is used as a label for an input attribute selection UI element.\n Currently limited to a maximum of 6 attribute inputs.\n\n\n\n\n\n\nEXAMPLE\n\n\n'Inputs': ['Input 1','Input 2','Input 3']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON KEYWORD\n\n\nOutput (optional)\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nArray of Strings\n\n\n\n\n\n\nDESCRIPTION\n\n\nEach string specifies the name of an output attribute.\nIf this keyword is not supplied a single output attribute is assumed.\n\n\n\n\n\n\nEXAMPLE\n\n\n'Output': ['Out 1','Out 2','Out 3']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON KEYWORD\n\n\nZSampMargin (optional)\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nObject with a 'Value' (array of 2 numbers)  and optional 'Hidden' (boolean) and 'Symmetric' (boolean) parameters.\n\n\n\n\n\n\nDESCRIPTION\n\n\nThe 'Value' parameter is an array of 2 numbers specifing the desired minimum number of samples before and after the calculation point required for the calculation respectively. If not supplied only a single value will be provided when the attribute is computed on a timeslice or horizon.\nThe optional 'Hidden' parameter is a boolean which if set to true makes the ZSampMargin parameter read only.\nThe optional 'Symmetric' parameter is a boolean which if true causes only a single entry to be displayed in the UI.\nThe optional 'Minimum' parameter is an array of 2 numbers specifying a minimum required window size\n\n\n\n\n\n\nEXAMPLES\n\n\n'ZSampMargin': {'Value': [-2,2]}\n \n'ZSampMargin': {'Value': [-2,2], 'Symmetric': True}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON KEYWORD\n\n\nStepOut (optional)\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nObject with a 'Value' (array of 2 numbers)  and optional 'Hidden' (boolean) parameters.\n\n\n\n\n\n\nDESCRIPTION\n\n\nThe 'Value' parameter is an array of 2 numbers specifing the inline and crossline stepout defining the block of traces to be used around the current calculation position. If not supplied only a single trace is provided.\nThe optional 'Hidden' parameter is a boolean which if set to true makes the StepOut parameter read only.\nThe optional 'Minimum' parameter is an array of 2 numbers specifying a minimum required stepout.\n\n\n\n\n\n\nEXAMPLES\n\n\n'StepOut': {'Value': [2,2]}\n \n'StepOut': {'Value': [2,2], 'Hidden': True}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON KEYWORD\n\n\nSelect (optional)\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nObject with a 'Name' (string), 'Values' (array of strings) and 'Select' (number) parameters.\n\n\n\n\n\n\nDESCRIPTION\n\n\nDisplays a list box labeled 'Name' with options specified in 'Values' and default selection being item number 'Select'.\n\n\n\n\n\n\nEXAMPLES\n\n\n'Select': {'Name': 'Type', 'Values': ['None', 'Median', 'Average'], 'Selection': 0}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON KEYWORDS\n\n\nPar_0, Par_1, Par_2, Par_3, Par_4, Par_5 (all optional)\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nObject with a 'Name' (string) and 'Value' (number) parameter.\n\n\n\n\n\n\nDESCRIPTION\n\n\nDisplays an entry box labeled 'Name' with default value 'Value'.\n\n\n\n\n\n\nEXAMPLES\n\n\n'Par_0' : {'Name': 'First Parameter', 'Value' : 100.0},\n'Par_1' : {'Name': 'Second Parameter', 'Value' : 200.0},\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON KEYWORD\n\n\nHelp (optional)\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nString\n\n\n\n\n\n\nDESCRIPTION\n\n\nURL pointing to documentation for the external attribute.\n Causes an icon help button to be displayed in the UI.\n\n\n\n\n\n\nEXAMPLES\n\n\n'Help'  : 'http://waynegm.github.io/OpendTect-Plugin-Docs/External-Attributes/LPA-Attributes/'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJSON KEYWORD\n\n\nParallel (optional)\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nBoolean\n\n\n\n\n\n\nDESCRIPTION\n\n\nDefault is True which allows parallel execution. If set to False then calculations only use a single thread.\n\n\n\n\n\n\nEXAMPLES\n\n\n'Parallel'  : False\n\n\n\n\n\n\n\n\nHere is an example parameter string:\n\n\n{\n    'Inputs': ['Test Input'],\n    'Output': ['Left', 'Right'],\n    'ZSampMargin' : {'Value': [-10,10]},\n    'StepOut' : {'Value': [1,1], 'Hidden': true},\n    'Par_0' : {'Name': 'First Parameter', 'Value' : 100.0},\n    'Par_1' : {'Name': 'Second Parameter','Value': 200.0},\n    'Help'  : 'https://gist.github.com/waynegm/84f323ec4aab3961c23d'\n}\n\n\n\n\nIssues\n\n\nOpendTect (Linux) hangs after selecting a Python external attribute in the Attribute Description Editor\n\n\nThis can happen if the Python file has Windows/DOS linebreaks. Use the dos2unix command on the Python file and all should be ok.\n\n\nSetting up a Python/Numpy/Scipy environment\n\n\nOn both Linux and Windows it can be a bit of a pain to set up a Python/Numpy/Scipy development stack for Python 3 from scratch. Continuum Analytics provide free Python installers for Linux and Windows in \nAnaconda\n. There is also a smaller DIY option called \nMiniconda\n which allows you to select just the packages you need (the examples only require Python 3, Numpy and Scipy).\n\n\nStructure of a Conforming Application\n\n\nThe rules that a comforming application must follow are described below and the extattrib.py module included in the plugin distribution provides a reference implementation.\n\n\n\n\nWhen invoked with a commandline argument of \n-g\n the application should write out a  \nJSON parameter string\n to stdout describing the attribute parameters and exit.\n\n\nWhen invoked with a commandline argument of \n-c json-parameter-string\n the application \n\n\nshould read and parse the contents of \njson-parameter-string\n to get the attribute parameters\n\n\nread a 40 byte block of binary data from stdin called the SeismicInfo block (described below)\n\n\nstart an endless loop that:\n\n\nreads a 16 byte block of binary data from stdin called the TraceInfo block (described below)\n\n\nreads a data block of 4 byte binary floats from stdin that contains the seismic trace data. The size of the data block depends on the content of the SeismicInfo (number of traces and number of inputs) and TraceInfo ( number of samples) blocks\n\n\nnumber_of_inputs * number_of_traces * number_of_samples * 4 bytes\n.\n\n\n\n\n\n\ncalculates the attribute output\n\n\nwrites a data block of 4 byte binary floats to stdout that contains the attribute output. The size of the output data block depends on the content of the TraceInfo ( number of samples) block and the number of output attributes\n\n\nnumber_of_samples * number_of_outputs * 4 bytes\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeismicInfo Block\n\n\nThis block of binary data is written to the applications stdin immediately after it is started with the \n-c\n argument. It consists of 40 bytes as follows:\n\n\n\n\n\n\n\n\nSIZE\n\n\nFORMAT\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\nnumber of traces for each input attribute\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\nnumber of input attributes\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\nnumber of output atrributes\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\nnumber of inline traces in the input data block\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\nnumber of crossline traces in the input data block\n\n\n\n\n\n\n4 bytes\n\n\nfloat\n\n\ntrace sampling interval  (result of OpendTect API call \nSI().zstep()\n)\n\n\n\n\n\n\n4 bytes\n\n\nfloat\n\n\ndistance between inlines (result of OpendTect API call \nSI().inlDistance()\n)\n\n\n\n\n\n\n4 bytes\n\n\nfloat\n\n\ndistance between crosslines (result of OpendTect API call \nSI().crlDistance()\n)\n\n\n\n\n\n\n4 bytes\n\n\nfloat\n\n\n(result of OpendTect API call \nzFactor()\n)\n\n\n\n\n\n\n4 bytes\n\n\nfloat\n\n\n(result of OpendTect API call \ndipFactor()\n)\n\n\n\n\n\n\n\n\nTraceInfo Block\n\n\nThis block of binary data is written to the application stdin immediately before each block of trace data. It consists of 16 bytes as follows:\n\n\n\n\n\n\n\n\nSIZE\n\n\nFORMAT\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\nnumber of samples in each trace within the input data block (OpendTect \nnrsamples\n parameter)\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\nposition of first sample in data trace within entire seismic trace ( OpendTect \nz0\n parameter)\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\ninline number of current calculation position\n\n\n\n\n\n\n4 bytes\n\n\ninteger\n\n\ncrossline number of current calculation position",
            "title": "External attributes"
        },
        {
            "location": "/Attributes/ExternalAttrib/#externalattrib",
            "text": "",
            "title": "ExternalAttrib"
        },
        {
            "location": "/Attributes/ExternalAttrib/#description",
            "text": "This is an attribute plugin for the open source seismic interpretation platform  OpendTect  - that allows the calculation of single and multitrace attributes outside of OpendTect by a user specified external application. The plugin supports multi-trace multi-attribute input and multi-attribute output as well as parallel execution.  NOTE:   Releases prior to 6.0.2 allowed multi-trace multi-attribute input only if all the attributes were in the same multi-attribute volume. In releases from 6.0.2 onward this limitation has been removed.  Instead of doing the attribute calculation within OpendTect this plugin starts up a user specified external application and then reads and writes the trace data to/from the external application's stdin and stdout. The external application must conform to some  simple rules  but could be written in any programming language, compiled or interpreted. This essentially means you can write a new OpendTect attribute in your computer language of choice and not have to delve into the internals of OpendTect.  A reference implementation for writing external attributes in Python/Numpy (version 3) is available. This consists of a module  extattrib.py  that handles the stdin/stdout details and presents the trace data as a numpy array.   There is a  repository of External Attribute scripts  for everything from dip estimation to filtering described in the  External Attributes  section of this documentation.",
            "title": "Description"
        },
        {
            "location": "/Attributes/ExternalAttrib/#input-parameters",
            "text": "This attribute has 3 required parameters and up to 9 optional parameters determined by the  JSON parameter string  provided by the external attribute script:     NAME  DESCRIPTION      Interpreter  For external attributes written in a scripted language this field specifies the location of the  interpreter required to run the script, eg /usr/bin/python3    External File  The external application to be used for attribute calculation.    Input  The input attribute to use",
            "title": "Input Parameters"
        },
        {
            "location": "/Attributes/ExternalAttrib/#cross-platform-setup",
            "text": "Prior to release 5.10 and 6.0.0pre7-1 any attribute set containing external attributes could not be shared between Windows and Linux because the Interpeter and External File input fields contain platform specific file paths.  Release 5.10 and 6.0.0pre7-1 introduced an optional mechanism to support cross platform attribute sets containing external attributes by using environment variables. Consider the following script for starting OpendTect on Linux:  #!/bin/csh -f\nsetenv DTECT_SETTINGS \"$HOME/.od6\"\nsetenv OD_USER_PLUGIN_DIR \"$HOME/.od6\"\nsetenv EX_PYTHON \"/opt/anaconda3/bin/python\"\nsetenv OD_EX_DIR \"$HOME/Development/GIT_AREA/OpendTect-External-Attributes/\"\n/opt/seismic/OpendTect_6/6.0.0/start_dtect   And an equivalent Windows command file:  @set OD_USER_PLUGIN_DIR=%HOMEPATH%\\od6\n@set EX_PYTHON=C:\\Miniconda3\\python.exe\n@set OD_EX_DIR=E:\\Development\\GIT_AREA\\OpendTect-External-Attributes\\\nstart \"\" \"C:\\Program Files\\OpendTect_6\\6.0.0\\bin\\win64\\Release\\od_start_dtect.exe\"  The environment variable EX_PYTHON points to the python interpreter for each platform and entering %EX_PYTHON% into the Interpreter input field ensures the platform appropriate interpreter is used. Any name can be used for the environment variable.  The  environment variable OD_EX_DIR points to a root folder below which the attribute script files can be found. The setting in the Linux startup script points to a Linux folder. The corresponding setting in the Windows command file points to the same location via a network share. This environment variable name is hard wired into the code so this variable name cannot be changed. Note that the script files cam be located in subfolders of the OD_EX_DIR folder.  This type of setup produces attribute set descriptions like this:  7.Definition: ExternalAttrib interpfile=%EX_PYTHON% exfile=%OD_EX_DIR%tests/ex_ui_test_all.py zmargin=[-1,1] stepout=1,1 selection=2 par0=0 par1=1 par2=2 par3=3 par4=4 par5=5 output=0  which can be used on either platform without change.  Attribute sets created by release 5.0.10 and 6.0.0pre7-1 and later that use these environment variables will not work in earlier versions of the External Attribute plugin.",
            "title": "Cross Platform Setup"
        },
        {
            "location": "/Attributes/ExternalAttrib/#attribute-json-parameter-string",
            "text": "The external application can specify a set of parameters as a JSON object string. The following keywords are supported:     JSON KEYWORD  Input (depreciated)      TYPE  String    DESCRIPTION  Specifies a label to appear beside the input attribute selection UI element.  Superceded by the \"Inputs\" keyword but is supported for backward compatibility.    EXAMPLE  'Input': 'Input Data'        JSON KEYWORD  Inputs      TYPE  Array of Strings    DESCRIPTION  Each string is used as a label for an input attribute selection UI element.  Currently limited to a maximum of 6 attribute inputs.    EXAMPLE  'Inputs': ['Input 1','Input 2','Input 3']        JSON KEYWORD  Output (optional)      TYPE  Array of Strings    DESCRIPTION  Each string specifies the name of an output attribute. If this keyword is not supplied a single output attribute is assumed.    EXAMPLE  'Output': ['Out 1','Out 2','Out 3']        JSON KEYWORD  ZSampMargin (optional)      TYPE  Object with a 'Value' (array of 2 numbers)  and optional 'Hidden' (boolean) and 'Symmetric' (boolean) parameters.    DESCRIPTION  The 'Value' parameter is an array of 2 numbers specifing the desired minimum number of samples before and after the calculation point required for the calculation respectively. If not supplied only a single value will be provided when the attribute is computed on a timeslice or horizon. The optional 'Hidden' parameter is a boolean which if set to true makes the ZSampMargin parameter read only. The optional 'Symmetric' parameter is a boolean which if true causes only a single entry to be displayed in the UI. The optional 'Minimum' parameter is an array of 2 numbers specifying a minimum required window size    EXAMPLES  'ZSampMargin': {'Value': [-2,2]}   'ZSampMargin': {'Value': [-2,2], 'Symmetric': True}        JSON KEYWORD  StepOut (optional)      TYPE  Object with a 'Value' (array of 2 numbers)  and optional 'Hidden' (boolean) parameters.    DESCRIPTION  The 'Value' parameter is an array of 2 numbers specifing the inline and crossline stepout defining the block of traces to be used around the current calculation position. If not supplied only a single trace is provided. The optional 'Hidden' parameter is a boolean which if set to true makes the StepOut parameter read only. The optional 'Minimum' parameter is an array of 2 numbers specifying a minimum required stepout.    EXAMPLES  'StepOut': {'Value': [2,2]}   'StepOut': {'Value': [2,2], 'Hidden': True}        JSON KEYWORD  Select (optional)      TYPE  Object with a 'Name' (string), 'Values' (array of strings) and 'Select' (number) parameters.    DESCRIPTION  Displays a list box labeled 'Name' with options specified in 'Values' and default selection being item number 'Select'.    EXAMPLES  'Select': {'Name': 'Type', 'Values': ['None', 'Median', 'Average'], 'Selection': 0}        JSON KEYWORDS  Par_0, Par_1, Par_2, Par_3, Par_4, Par_5 (all optional)      TYPE  Object with a 'Name' (string) and 'Value' (number) parameter.    DESCRIPTION  Displays an entry box labeled 'Name' with default value 'Value'.    EXAMPLES  'Par_0' : {'Name': 'First Parameter', 'Value' : 100.0}, 'Par_1' : {'Name': 'Second Parameter', 'Value' : 200.0},        JSON KEYWORD  Help (optional)      TYPE  String    DESCRIPTION  URL pointing to documentation for the external attribute.  Causes an icon help button to be displayed in the UI.    EXAMPLES  'Help'  : 'http://waynegm.github.io/OpendTect-Plugin-Docs/External-Attributes/LPA-Attributes/'        JSON KEYWORD  Parallel (optional)      TYPE  Boolean    DESCRIPTION  Default is True which allows parallel execution. If set to False then calculations only use a single thread.    EXAMPLES  'Parallel'  : False     Here is an example parameter string:  {\n    'Inputs': ['Test Input'],\n    'Output': ['Left', 'Right'],\n    'ZSampMargin' : {'Value': [-10,10]},\n    'StepOut' : {'Value': [1,1], 'Hidden': true},\n    'Par_0' : {'Name': 'First Parameter', 'Value' : 100.0},\n    'Par_1' : {'Name': 'Second Parameter','Value': 200.0},\n    'Help'  : 'https://gist.github.com/waynegm/84f323ec4aab3961c23d'\n}",
            "title": "Attribute JSON Parameter String"
        },
        {
            "location": "/Attributes/ExternalAttrib/#issues",
            "text": "",
            "title": "Issues"
        },
        {
            "location": "/Attributes/ExternalAttrib/#opendtect-linux-hangs-after-selecting-a-python-external-attribute-in-the-attribute-description-editor",
            "text": "This can happen if the Python file has Windows/DOS linebreaks. Use the dos2unix command on the Python file and all should be ok.",
            "title": "OpendTect (Linux) hangs after selecting a Python external attribute in the Attribute Description Editor"
        },
        {
            "location": "/Attributes/ExternalAttrib/#setting-up-a-pythonnumpyscipy-environment",
            "text": "On both Linux and Windows it can be a bit of a pain to set up a Python/Numpy/Scipy development stack for Python 3 from scratch. Continuum Analytics provide free Python installers for Linux and Windows in  Anaconda . There is also a smaller DIY option called  Miniconda  which allows you to select just the packages you need (the examples only require Python 3, Numpy and Scipy).",
            "title": "Setting up a Python/Numpy/Scipy environment"
        },
        {
            "location": "/Attributes/ExternalAttrib/#structure-of-a-conforming-application",
            "text": "The rules that a comforming application must follow are described below and the extattrib.py module included in the plugin distribution provides a reference implementation.   When invoked with a commandline argument of  -g  the application should write out a   JSON parameter string  to stdout describing the attribute parameters and exit.  When invoked with a commandline argument of  -c json-parameter-string  the application   should read and parse the contents of  json-parameter-string  to get the attribute parameters  read a 40 byte block of binary data from stdin called the SeismicInfo block (described below)  start an endless loop that:  reads a 16 byte block of binary data from stdin called the TraceInfo block (described below)  reads a data block of 4 byte binary floats from stdin that contains the seismic trace data. The size of the data block depends on the content of the SeismicInfo (number of traces and number of inputs) and TraceInfo ( number of samples) blocks  number_of_inputs * number_of_traces * number_of_samples * 4 bytes .    calculates the attribute output  writes a data block of 4 byte binary floats to stdout that contains the attribute output. The size of the output data block depends on the content of the TraceInfo ( number of samples) block and the number of output attributes  number_of_samples * number_of_outputs * 4 bytes .",
            "title": "Structure of a Conforming Application"
        },
        {
            "location": "/Attributes/ExternalAttrib/#seismicinfo-block",
            "text": "This block of binary data is written to the applications stdin immediately after it is started with the  -c  argument. It consists of 40 bytes as follows:     SIZE  FORMAT  DESCRIPTION      4 bytes  integer  number of traces for each input attribute    4 bytes  integer  number of input attributes    4 bytes  integer  number of output atrributes    4 bytes  integer  number of inline traces in the input data block    4 bytes  integer  number of crossline traces in the input data block    4 bytes  float  trace sampling interval  (result of OpendTect API call  SI().zstep() )    4 bytes  float  distance between inlines (result of OpendTect API call  SI().inlDistance() )    4 bytes  float  distance between crosslines (result of OpendTect API call  SI().crlDistance() )    4 bytes  float  (result of OpendTect API call  zFactor() )    4 bytes  float  (result of OpendTect API call  dipFactor() )",
            "title": "SeismicInfo Block"
        },
        {
            "location": "/Attributes/ExternalAttrib/#traceinfo-block",
            "text": "This block of binary data is written to the application stdin immediately before each block of trace data. It consists of 16 bytes as follows:     SIZE  FORMAT  DESCRIPTION      4 bytes  integer  number of samples in each trace within the input data block (OpendTect  nrsamples  parameter)    4 bytes  integer  position of first sample in data trace within entire seismic trace ( OpendTect  z0  parameter)    4 bytes  integer  inline number of current calculation position    4 bytes  integer  crossline number of current calculation position",
            "title": "TraceInfo Block"
        },
        {
            "location": "/Attributes/GradientAttrib/",
            "text": "GradientAttrib\n\n\nCalculation of inline, crossline and time/depth gradient for the open source seismic interpretation platform \nOpendTect\n 6.0.0 or later.\n\n\nDescription\n\n\nThis plugin calculates the inline, crossline or time/depth gradient using operators optimised for rotation invariance, ie equal response in all directions, proposed  by \nKroon (2009)\n and \nFarid and Simoncelli(2004)\n. These provide more accurate alternatives to the Prewitt filter option of the OpendTect Convolve attribute for computing gradients.\n\n\nThe attribute offers a choice of Kroon's 3x3x3, Farid and Simoncelli's 5x5x5 or Farid and Simoncelli's 7x7x7 operator. The following figures demonstrate the relative accuracy of these operators and the OpendTect Prewitt filter on a simple periodic signal (top left) with event dip angle shown top right. Gradients calculated using each operator are used to compute the event dip angle and the absolute dip angle error. The superior accuracy of the operators provided by this attribute is clear.\n\n\n\n\nInput Parameters\n\n\nThis attribute has 3 parameters:\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nInput Volume\n\n\nThe input attribute volume.\n\n\n\n\n\n\nOutput Gradient\n\n\nWhat to calculate - choice of Inline, Crossline or Z gradient.\n\n\n\n\n\n\nOperator\n\n\nWhat operator to use - choice of Kroon's 3x3x3, Farid's 5x5x5 or Farid's 7x7x7.",
            "title": "Gradient attribute"
        },
        {
            "location": "/Attributes/GradientAttrib/#gradientattrib",
            "text": "Calculation of inline, crossline and time/depth gradient for the open source seismic interpretation platform  OpendTect  6.0.0 or later.",
            "title": "GradientAttrib"
        },
        {
            "location": "/Attributes/GradientAttrib/#description",
            "text": "This plugin calculates the inline, crossline or time/depth gradient using operators optimised for rotation invariance, ie equal response in all directions, proposed  by  Kroon (2009)  and  Farid and Simoncelli(2004) . These provide more accurate alternatives to the Prewitt filter option of the OpendTect Convolve attribute for computing gradients.  The attribute offers a choice of Kroon's 3x3x3, Farid and Simoncelli's 5x5x5 or Farid and Simoncelli's 7x7x7 operator. The following figures demonstrate the relative accuracy of these operators and the OpendTect Prewitt filter on a simple periodic signal (top left) with event dip angle shown top right. Gradients calculated using each operator are used to compute the event dip angle and the absolute dip angle error. The superior accuracy of the operators provided by this attribute is clear.",
            "title": "Description"
        },
        {
            "location": "/Attributes/GradientAttrib/#input-parameters",
            "text": "This attribute has 3 parameters:     NAME  DESCRIPTION      Input Volume  The input attribute volume.    Output Gradient  What to calculate - choice of Inline, Crossline or Z gradient.    Operator  What operator to use - choice of Kroon's 3x3x3, Farid's 5x5x5 or Farid's 7x7x7.",
            "title": "Input Parameters"
        },
        {
            "location": "/Attributes/LTFAttrib/",
            "text": "LTFAttrib\n\n\nLocal time frequency attribute plugin for the open source seismic interpretation platform \nOpendTect\n.\n\n\nDescription\n\n\nThis is an implementation of the method of local time-frequency analysis described by \nLiu, G etal (2011)\n. The time-frequency decomposition uses least-squares inversion with shaping regularization. It is different to STFT (short time fourier transform) which divides the data into windows to  localize frequency content in time.\n\n\nThis plugin requires a working installation of \nMadagascar\n and provides an example of an attribute using the Madagascar libraries.\n\n\nThis attribute can be unstable. The issue apppears to be in the Madagascar libraries as the same instabilites exist when the equivalent Madagascar command line program (\nsftimefreq\n) is applied.\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\nThe output of the LTF attribute (ltf30) is visually identical and also highly correlated to the OpendTect FFT spectral decomposition (sdfreq30) as shown in the following crossplot of the two attributes.\n\n\nCrossplot of LTFAttrib vs FFT Spectral Decomposition\n\n\n\n\nInput Parameters\n\n\nThis attribute has 4 parameters:\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nInput Volume\n\n\nThe attribute volume to be analysed.\n\n\n\n\n\n\nFrequency\n\n\nThe frequency component to estimate.\n\n\n\n\n\n\nSmoothing Radius\n\n\nIn shaping regularization this parameter controls the smoothness of the model.\n\n\n\n\n\n\nIterations\n\n\nThe number of inversion iterations.\n\n\n\n\n\n\nMargin\n\n\nAmount of data around the calculation sample to include in the calculation. Specified in number of smoothing radii.",
            "title": "Local time-frequency attribute"
        },
        {
            "location": "/Attributes/LTFAttrib/#ltfattrib",
            "text": "Local time frequency attribute plugin for the open source seismic interpretation platform  OpendTect .",
            "title": "LTFAttrib"
        },
        {
            "location": "/Attributes/LTFAttrib/#description",
            "text": "This is an implementation of the method of local time-frequency analysis described by  Liu, G etal (2011) . The time-frequency decomposition uses least-squares inversion with shaping regularization. It is different to STFT (short time fourier transform) which divides the data into windows to  localize frequency content in time.  This plugin requires a working installation of  Madagascar  and provides an example of an attribute using the Madagascar libraries.  This attribute can be unstable. The issue apppears to be in the Madagascar libraries as the same instabilites exist when the equivalent Madagascar command line program ( sftimefreq ) is applied.",
            "title": "Description"
        },
        {
            "location": "/Attributes/LTFAttrib/#examples",
            "text": "The output of the LTF attribute (ltf30) is visually identical and also highly correlated to the OpendTect FFT spectral decomposition (sdfreq30) as shown in the following crossplot of the two attributes.  Crossplot of LTFAttrib vs FFT Spectral Decomposition",
            "title": "Examples"
        },
        {
            "location": "/Attributes/LTFAttrib/#input-parameters",
            "text": "This attribute has 4 parameters:     NAME  DESCRIPTION      Input Volume  The attribute volume to be analysed.    Frequency  The frequency component to estimate.    Smoothing Radius  In shaping regularization this parameter controls the smoothness of the model.    Iterations  The number of inversion iterations.    Margin  Amount of data around the calculation sample to include in the calculation. Specified in number of smoothing radii.",
            "title": "Input Parameters"
        },
        {
            "location": "/Attributes/MLVFilter/",
            "text": "MLV Filter\n\n\nStructure preserving Mean of Least Variance Filter plugin for open source seismic interpretation platform \nOpendTect\n.\n\n\nDescription\n\n\nThis attribute is an implementation of a mean of least variance filter \nSchulze & Pearce (1993)\n where the analysis elements are all the possible planes through the sample points in the analysis block. This algorithm may be similar to that proposed by \nAl-Dossary & Wang (2011)\n. \n\n\nThe sample variance for all samples on each analysis element is calculated and the output statistic (average, mean or element index) is output for the element with the least variance. \n\n\nThe following figure shows the relationship between the geometry of the analysis elements and the element index.\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMLV Size 3 Elements over Input\n\n\n\n\nInput Parameters\n\n\nThis attribute has 2 parameters:\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nFilter size\n\n\nSpecifies a cube of samples centred  at the analysis location. Increasing the size will increase the degree of smoothing at the risk of smearing structural features. As the examples show it may be better to apply multiple passes of a small size filter than a single pass of a larger filter to reduce the risk of artifacts in the output. OpendTect makes it really easy to cascade multiple filter passes.\n\n\n\n\n\n\nOutput statistic\n\n\nWhat the filter will output. The options are average, median or the element index. The element index is included for curiosity and quality control. Generally the default \nAverage\n provides the most pleasing output.",
            "title": "Mean of least variance filter"
        },
        {
            "location": "/Attributes/MLVFilter/#mlv-filter",
            "text": "Structure preserving Mean of Least Variance Filter plugin for open source seismic interpretation platform  OpendTect .",
            "title": "MLV Filter"
        },
        {
            "location": "/Attributes/MLVFilter/#description",
            "text": "This attribute is an implementation of a mean of least variance filter  Schulze & Pearce (1993)  where the analysis elements are all the possible planes through the sample points in the analysis block. This algorithm may be similar to that proposed by  Al-Dossary & Wang (2011) .   The sample variance for all samples on each analysis element is calculated and the output statistic (average, mean or element index) is output for the element with the least variance.   The following figure shows the relationship between the geometry of the analysis elements and the element index.",
            "title": "Description"
        },
        {
            "location": "/Attributes/MLVFilter/#examples",
            "text": "MLV Size 3 Elements over Input",
            "title": "Examples"
        },
        {
            "location": "/Attributes/MLVFilter/#input-parameters",
            "text": "This attribute has 2 parameters:     NAME  DESCRIPTION      Filter size  Specifies a cube of samples centred  at the analysis location. Increasing the size will increase the degree of smoothing at the risk of smearing structural features. As the examples show it may be better to apply multiple passes of a small size filter than a single pass of a larger filter to reduce the risk of artifacts in the output. OpendTect makes it really easy to cascade multiple filter passes.    Output statistic  What the filter will output. The options are average, median or the element index. The element index is included for curiosity and quality control. Generally the default  Average  provides the most pleasing output.",
            "title": "Input Parameters"
        },
        {
            "location": "/Attributes/RSpecAttrib/",
            "text": "RSpecAttrib\n\n\nRecursive time-frequency decomposition attribute for the open source seismic interpretation platform \nOpendTect\n.\n\n\nDescription\n\n\nThis plugin can be used as an alternative to the \nOpendTect FFT spectral decomposition attribute\n.\n\n\nIt does spectral decomposition using \nNilsen's (2007)\n time-frequency analysis algorithm which is a recursive filter approximation to a special case of the short time fourier transform (STFT). \n\n\nThe primary advantage of this plugin over the standard OpendTect FFT spectral decomposition is that it can be evaluated significantly faster. As an example, under Linux on an Intel Core i5 for a 2000 sample per trace dataset, this attribute can generate a single frequency cube at 4000 traces per second. This is considerably faster than the 140-150 traces per second achieved when applying the OpendTect FFT spectral decomposition attribute. This processing speed advantage is reduced as the number of output frequencies increases but in this test case it still remains substantially faster even for output of up to 30 frequencies.\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\nThe output of the RSpec attribute (rfreq30) is visually identical and also highly correlated to the OpendTect FFT spectral decomposition (sdfreq30) as shown in the following crossplot of the two attributes.\n\n\nCrossplot of RSpecAttrib vs FFT Spectral Decomposition\n\n\n\n\nInput Parameters\n\n\nThis attribute has 4 parameters:\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nInput Volume\n\n\nThe attribute volume to be analysed.\n\n\n\n\n\n\nTime/Depth Gate\n\n\nThis determines the position and time resolution of the analysis. The value from the gate centre is output - useful for analysing a zone offset from an horizon. Recommend setting the gate length equal to or less than the FFT window length you would used for the standard OpendTect FFT spectral decomposition.\n\n\n\n\n\n\nOutput frequency\n\n\nWhen displaying the attribute in the tree this is the frequency slice that will be generated\n\n\n\n\n\n\nStep\n\n\nThis determines the set of frequencies that can be chosen when generating a frequency volume.",
            "title": "Recursive time-frequency decomposition"
        },
        {
            "location": "/Attributes/RSpecAttrib/#rspecattrib",
            "text": "Recursive time-frequency decomposition attribute for the open source seismic interpretation platform  OpendTect .",
            "title": "RSpecAttrib"
        },
        {
            "location": "/Attributes/RSpecAttrib/#description",
            "text": "This plugin can be used as an alternative to the  OpendTect FFT spectral decomposition attribute .  It does spectral decomposition using  Nilsen's (2007)  time-frequency analysis algorithm which is a recursive filter approximation to a special case of the short time fourier transform (STFT).   The primary advantage of this plugin over the standard OpendTect FFT spectral decomposition is that it can be evaluated significantly faster. As an example, under Linux on an Intel Core i5 for a 2000 sample per trace dataset, this attribute can generate a single frequency cube at 4000 traces per second. This is considerably faster than the 140-150 traces per second achieved when applying the OpendTect FFT spectral decomposition attribute. This processing speed advantage is reduced as the number of output frequencies increases but in this test case it still remains substantially faster even for output of up to 30 frequencies.",
            "title": "Description"
        },
        {
            "location": "/Attributes/RSpecAttrib/#examples",
            "text": "The output of the RSpec attribute (rfreq30) is visually identical and also highly correlated to the OpendTect FFT spectral decomposition (sdfreq30) as shown in the following crossplot of the two attributes.  Crossplot of RSpecAttrib vs FFT Spectral Decomposition",
            "title": "Examples"
        },
        {
            "location": "/Attributes/RSpecAttrib/#input-parameters",
            "text": "This attribute has 4 parameters:     NAME  DESCRIPTION      Input Volume  The attribute volume to be analysed.    Time/Depth Gate  This determines the position and time resolution of the analysis. The value from the gate centre is output - useful for analysing a zone offset from an horizon. Recommend setting the gate length equal to or less than the FFT window length you would used for the standard OpendTect FFT spectral decomposition.    Output frequency  When displaying the attribute in the tree this is the frequency slice that will be generated    Step  This determines the set of frequencies that can be chosen when generating a frequency volume.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/ExternalAttributes/",
            "text": "External Attribute Scripts\n\n\nThis \nrepository of attribute  scripts\n for the \nExternal Attribute plugin\n provides the following:\n\n\n\n\n\n\n\n\nLINK\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nAVO Intercept and Gradient\n\n\nCompute AVO intercept and gradient from angle stacks\n\n\n\n\n\n\nDip and Azimuth\n\n\nOrientation estimation (eg inline dip, crossline dip, true dip and dip azimuth) using a variety of algorithms\n\n\n\n\n\n\nLPA Smoothing\n\n\nStructure preserving smoothing using local polynomial approximation\n\n\n\n\n\n\nLPA Attributes\n\n\nVarious attributes calculated using a local polynomial approximation\n\n\n\n\n\n\nCircular Spatial Filter\n\n\nApply lowpass, highpass, bandpass or band reject spatial (k-k) filter with circular symmetry\n\n\n\n\n\n\nRectangular Spatial Filter\n\n\nApply lowpass, highpass, bandpass or band reject spatial (k-k) filter with rectangular symmetry or by setting a stepout of 0 in one direction apply a 1D spatial filter.\n\n\n\n\n\n\nVector Filtering\n\n\nVector filter for orientation ( inline and crossline dip) data\n\n\n\n\n\n\nZ Delay Estimation\n\n\nEstimate Z delays between 2 volumes using local correlation\n\n\n\n\n\n\nZero crossing trace blocking\n\n\nReplace a trace with a blocky/square wave version of itself honouring local min/max.",
            "title": "Introduction"
        },
        {
            "location": "/External_Attributes/ExternalAttributes/#external-attribute-scripts",
            "text": "This  repository of attribute  scripts  for the  External Attribute plugin  provides the following:     LINK  DESCRIPTION      AVO Intercept and Gradient  Compute AVO intercept and gradient from angle stacks    Dip and Azimuth  Orientation estimation (eg inline dip, crossline dip, true dip and dip azimuth) using a variety of algorithms    LPA Smoothing  Structure preserving smoothing using local polynomial approximation    LPA Attributes  Various attributes calculated using a local polynomial approximation    Circular Spatial Filter  Apply lowpass, highpass, bandpass or band reject spatial (k-k) filter with circular symmetry    Rectangular Spatial Filter  Apply lowpass, highpass, bandpass or band reject spatial (k-k) filter with rectangular symmetry or by setting a stepout of 0 in one direction apply a 1D spatial filter.    Vector Filtering  Vector filter for orientation ( inline and crossline dip) data    Z Delay Estimation  Estimate Z delays between 2 volumes using local correlation    Zero crossing trace blocking  Replace a trace with a blocky/square wave version of itself honouring local min/max.",
            "title": "External Attribute Scripts"
        },
        {
            "location": "/External_Attributes/AVO_IG/",
            "text": "AVO Intercept and Gradient\n\n\nDescription\n\n\nThese \nExternal Attribute\n scripts estimate AVO intercept and gradient based on Shuey's 2 term approximation to the Zoeppritz  equation.\n\n\nIntercept and Gradient from 4 Angle Stacks\n\n\nScript: Miscellaneous/ex_angle_stacks_4_to_AVOIG.py\n\n\nTakes as input 4 angle stacks and the corresponding angles and fits a least squares line to the amplitude and \n\\(sin^2(angle)\\)\n at each sample point. Ouput includes the intercept, gradient and the correlation coefficient.\n\n\nInput Parameters\n\n\n\n\nFor each input volume the corresponding incident angle must be provided.",
            "title": "AVO Intercept and Gradient"
        },
        {
            "location": "/External_Attributes/AVO_IG/#avo-intercept-and-gradient",
            "text": "",
            "title": "AVO Intercept and Gradient"
        },
        {
            "location": "/External_Attributes/AVO_IG/#description",
            "text": "These  External Attribute  scripts estimate AVO intercept and gradient based on Shuey's 2 term approximation to the Zoeppritz  equation.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/AVO_IG/#intercept-and-gradient-from-4-angle-stacks",
            "text": "",
            "title": "Intercept and Gradient from 4 Angle Stacks"
        },
        {
            "location": "/External_Attributes/AVO_IG/#script-miscellaneousex_angle_stacks_4_to_avoigpy",
            "text": "Takes as input 4 angle stacks and the corresponding angles and fits a least squares line to the amplitude and  \\(sin^2(angle)\\)  at each sample point. Ouput includes the intercept, gradient and the correlation coefficient.",
            "title": "Script: Miscellaneous/ex_angle_stacks_4_to_AVOIG.py"
        },
        {
            "location": "/External_Attributes/AVO_IG/#input-parameters",
            "text": "For each input volume the corresponding incident angle must be provided.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/",
            "text": "Dip and Azimuth\n\n\nDescription\n\n\nThese \nExternal Attribute\n scripts estimate orientation, ie dip or dip azimuth, using a variety of techniques.\n\n\nAll scripts will estimate at least the following attributes:\n\n\n\n\n\n\n\n\nOUTPUT\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nInline Dip\n\n\nEvent dip observed on a crossline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger inline numbers producing positive dips.\n\n\n\n\n\n\nCrossline Dip\n\n\nEvent dip observed on an inline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger crossline numbers producing positive dips.\n\n\n\n\n\n\nTrue Dip\n\n\nEvent dip in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output is always positive.\n\n\n\n\n\n\nDip Azimuth\n\n\nAzimuth of the True Dip direction relative to the survey orientation. Output ranges from -180 to 180 degrees. Positive azimuth is defined from the inline in the direction of increasing crossline numbers. Azimuth = 0 indicates that the dip is dipping in the direction of increasing crossline numbers. Azimuth = 90 indicates that the dip is dipping in the direction of increasing inline numbers.\n\n\n\n\n\n\n\n\nSome scripts may offer additional outputs such as a measure of event coherency or planarity.\n\n\nAll of the scripts require the numba Python package.\n\n\nOrientation from gradients\n\n\nScript: ex_gradient_dip.py\n\n\nCalculates orientation from inline, crossline and Z gradients. No filtering is applied\n\n\nInput Parameters\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nWhat to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.\n\n\n\n\n\n\n\n\nExample (crossline dip on an inline)\n\n\n\n\nOrientation from vector filtered gradients\n\n\nScript: ex_vf_gradient3_dip.py\n\n\nUses \nKroon's (2009)\n 3 point derivative filter to estimate data gradients. Next gradient normal unit vectors are determined and smoothed using a vector filter.\n\n\nInput Parameters\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nWhat to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nSpecifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2.\n\n\n\n\n\n\nStepout\n\n\nSpecifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2.\n\n\n\n\n\n\nFilter\n\n\nChoice of Mean Dip, L1 Vector Median or L2 Vector Median\n\n\n\n\n\n\n\n\nThe aperture of the vector filtering 2*Z_window-1 Z samples and 2*Stepout-1 samples in the inline and crossline direction. For example for a 5x5x5 analysis cube (Z_window=2, Stepout=2) the gradients and associated normal unit vectors are generated on a 3x3x3 cube and vector filtered. The outer samples are only used in the gradient calculation.\n\n\nExample (crossline dip on an inline 5x5x5 input)\n\n\n\n\nOrientation by the gradient structure tensor\n\n\nScripts: ex_gradient3_st_dip.py & ex_gradient5_st_dip.py\n\n\nUses either \nKroon's (2009)\n 3 point or the \nFarid and Simoncelli (2004)\n 5 point derivative filter to estimate data gradients which are then used to form the gradient structure tensor.\n\n\nInput Parameters\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nWhat to calculate - choice of inline dip, crossline dip, true dip, dip azimuth or plane coherency.\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nSpecifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2 for gradient3 and 3 for gradient5.\n\n\n\n\n\n\nStepout\n\n\nSpecifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2 for gradient3 and 3 for gradient5.\n\n\n\n\n\n\n\n\nFor the gradient3 script the structure tensor is formed from an aperture of 2*Z_window-1 Z samples and 2*Stepout-1 samples in the inline and crossline direction.\nFor the gradient5 script the structure tensor is formed from an aperture of 2*Z_window-2 Z samples and 2*Stepout-2 samples in the inline and crossline direction.\n\n\nExample (crossline dip on an inline - gradient3 for 5x5x5 input)\n\n\n\n\nOrientation from the 3D complex trace phase\n\n\nScript: ex_phase3_dip.py\n\n\nCalculates orientation from the 3D complex trace phase gradients as per \nBarnes (2007)\n. \nKroon's (2009)\n 3 point derivative filter used to compute gradients.\n\n\nInput Parameters\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nWhat to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nSpecifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2.\n\n\n\n\n\n\nStepout\n\n\nSpecifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2.\n\n\n\n\n\n\n\n\nExample (crossline dip on an inline - unfiltered phase dip)\n\n\n\n\nOrientation from vector filtered 3D complex trace phase\n\n\nScript: ex_vf_phase3_dip.py\n\n\nCalculate orientation unit normal vectors using the 3D complex trace phase gradient and apply a vector filter. \nKroon's (2009)\n 3 point filter used to compute gradients.\n\n\nInput Parameters\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nWhat to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nSpecifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2.\n\n\n\n\n\n\nStepout\n\n\nSpecifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2.\n\n\n\n\n\n\nFilter\n\n\nChoice of Mean Dip, L1 Vector Median or L2 Vector Median\n\n\n\n\n\n\n\n\nThe aperture of the vector filtering 2*Z_window-1 Z samples and 2*Stepout-1 samples in the inline and crossline direction. \n\n\nExample (crossline dip on an inline - 5x5x5 input)\n\n\n\n\nOrientation using the envelope weighted 3D complex trace phase structure tensor\n\n\nScript: ex_weighted_phase3_st_dip.py\n\n\nForms a structure tensor from the 3D complex trace phase gradients. Tensor elements are weighted by the trace envelope as per \nLuo etal (2006)\n. \nKroon's (2009)\n 3 point filter used to compute gradients. \n\n\nInput Parameters\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nWhat to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nSpecifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2.\n\n\n\n\n\n\nStepout\n\n\nSpecifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2.\n\n\n\n\n\n\n\n\nThe aperture of the structure tensor is 2*Z_window-1 Z samples and 2*Stepout-1 samples in the inline and crossline direction.\n\n\nExample (crossline dip on an inline - 5x5x5 input)",
            "title": "Dip and Azimuth"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#dip-and-azimuth",
            "text": "",
            "title": "Dip and Azimuth"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#description",
            "text": "These  External Attribute  scripts estimate orientation, ie dip or dip azimuth, using a variety of techniques.  All scripts will estimate at least the following attributes:     OUTPUT  DESCRIPTION      Inline Dip  Event dip observed on a crossline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger inline numbers producing positive dips.    Crossline Dip  Event dip observed on an inline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger crossline numbers producing positive dips.    True Dip  Event dip in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output is always positive.    Dip Azimuth  Azimuth of the True Dip direction relative to the survey orientation. Output ranges from -180 to 180 degrees. Positive azimuth is defined from the inline in the direction of increasing crossline numbers. Azimuth = 0 indicates that the dip is dipping in the direction of increasing crossline numbers. Azimuth = 90 indicates that the dip is dipping in the direction of increasing inline numbers.     Some scripts may offer additional outputs such as a measure of event coherency or planarity.  All of the scripts require the numba Python package.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#orientation-from-gradients",
            "text": "",
            "title": "Orientation from gradients"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#script-ex_gradient_dippy",
            "text": "Calculates orientation from inline, crossline and Z gradients. No filtering is applied",
            "title": "Script: ex_gradient_dip.py"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#input-parameters",
            "text": "NAME  DESCRIPTION      Output  What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#example-crossline-dip-on-an-inline",
            "text": "",
            "title": "Example (crossline dip on an inline)"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#orientation-from-vector-filtered-gradients",
            "text": "",
            "title": "Orientation from vector filtered gradients"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#script-ex_vf_gradient3_dippy",
            "text": "Uses  Kroon's (2009)  3 point derivative filter to estimate data gradients. Next gradient normal unit vectors are determined and smoothed using a vector filter.",
            "title": "Script: ex_vf_gradient3_dip.py"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#input-parameters_1",
            "text": "NAME  DESCRIPTION      Output  What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.    Z window (+/-samples)  Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2.    Stepout  Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2.    Filter  Choice of Mean Dip, L1 Vector Median or L2 Vector Median     The aperture of the vector filtering 2*Z_window-1 Z samples and 2*Stepout-1 samples in the inline and crossline direction. For example for a 5x5x5 analysis cube (Z_window=2, Stepout=2) the gradients and associated normal unit vectors are generated on a 3x3x3 cube and vector filtered. The outer samples are only used in the gradient calculation.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#example-crossline-dip-on-an-inline-5x5x5-input",
            "text": "",
            "title": "Example (crossline dip on an inline 5x5x5 input)"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#orientation-by-the-gradient-structure-tensor",
            "text": "",
            "title": "Orientation by the gradient structure tensor"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#scripts-ex_gradient3_st_dippy-ex_gradient5_st_dippy",
            "text": "Uses either  Kroon's (2009)  3 point or the  Farid and Simoncelli (2004)  5 point derivative filter to estimate data gradients which are then used to form the gradient structure tensor.",
            "title": "Scripts: ex_gradient3_st_dip.py &amp; ex_gradient5_st_dip.py"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#input-parameters_2",
            "text": "NAME  DESCRIPTION      Output  What to calculate - choice of inline dip, crossline dip, true dip, dip azimuth or plane coherency.    Z window (+/-samples)  Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2 for gradient3 and 3 for gradient5.    Stepout  Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2 for gradient3 and 3 for gradient5.     For the gradient3 script the structure tensor is formed from an aperture of 2*Z_window-1 Z samples and 2*Stepout-1 samples in the inline and crossline direction.\nFor the gradient5 script the structure tensor is formed from an aperture of 2*Z_window-2 Z samples and 2*Stepout-2 samples in the inline and crossline direction.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#example-crossline-dip-on-an-inline-gradient3-for-5x5x5-input",
            "text": "",
            "title": "Example (crossline dip on an inline - gradient3 for 5x5x5 input)"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#orientation-from-the-3d-complex-trace-phase",
            "text": "",
            "title": "Orientation from the 3D complex trace phase"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#script-ex_phase3_dippy",
            "text": "Calculates orientation from the 3D complex trace phase gradients as per  Barnes (2007) .  Kroon's (2009)  3 point derivative filter used to compute gradients.",
            "title": "Script: ex_phase3_dip.py"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#input-parameters_3",
            "text": "NAME  DESCRIPTION      Output  What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.    Z window (+/-samples)  Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2.    Stepout  Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#example-crossline-dip-on-an-inline-unfiltered-phase-dip",
            "text": "",
            "title": "Example (crossline dip on an inline - unfiltered phase dip)"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#orientation-from-vector-filtered-3d-complex-trace-phase",
            "text": "",
            "title": "Orientation from vector filtered 3D complex trace phase"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#script-ex_vf_phase3_dippy",
            "text": "Calculate orientation unit normal vectors using the 3D complex trace phase gradient and apply a vector filter.  Kroon's (2009)  3 point filter used to compute gradients.",
            "title": "Script: ex_vf_phase3_dip.py"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#input-parameters_4",
            "text": "NAME  DESCRIPTION      Output  What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.    Z window (+/-samples)  Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2.    Stepout  Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2.    Filter  Choice of Mean Dip, L1 Vector Median or L2 Vector Median     The aperture of the vector filtering 2*Z_window-1 Z samples and 2*Stepout-1 samples in the inline and crossline direction.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#example-crossline-dip-on-an-inline-5x5x5-input_1",
            "text": "",
            "title": "Example (crossline dip on an inline - 5x5x5 input)"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#orientation-using-the-envelope-weighted-3d-complex-trace-phase-structure-tensor",
            "text": "",
            "title": "Orientation using the envelope weighted 3D complex trace phase structure tensor"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#script-ex_weighted_phase3_st_dippy",
            "text": "Forms a structure tensor from the 3D complex trace phase gradients. Tensor elements are weighted by the trace envelope as per  Luo etal (2006) .  Kroon's (2009)  3 point filter used to compute gradients.",
            "title": "Script: ex_weighted_phase3_st_dip.py"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#input-parameters_5",
            "text": "NAME  DESCRIPTION      Output  What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.    Z window (+/-samples)  Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1. The minimum value is 2.    Stepout  Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1. The minimum value for both stepouts is 2.     The aperture of the structure tensor is 2*Z_window-1 Z samples and 2*Stepout-1 samples in the inline and crossline direction.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/DipandAzimuth/#example-crossline-dip-on-an-inline-5x5x5-input_2",
            "text": "",
            "title": "Example (crossline dip on an inline - 5x5x5 input)"
        },
        {
            "location": "/External_Attributes/LPA_Smooth/",
            "text": "Local Polynomial Approximation Smoothing\n\n\nScript: ex_lpa_smooth.py\n\n\nDescription\n\n\nThis \nExternal Attribute\n script can be used to apply structure preserving smoothing. A region of data around each sample location is fitted by a second order 3D polynomial using gaussian weighted least squares. \n\n\nThe approximation has the following form:\n\n\n\\[\n    r_0 + r_1 * x + r_2 * y + r_3 * z + r_4 * x^2 + r_5 * y^2 + r_6 * z^2 + r_7 * x*y + r_8 * x*z + r_9 * y*z\n\\]\nwhere x (inline), y (crossline) and z (time/depth) are relative to the analysis location, ie the analysis location has x=y=z=0.\n\n\nThis attribute calculates and outputs only the r0 term of the local polynomial approximation. This provides a smoother version of the input with relatively minor smearing of steep dips and fault cuts. Increasing either the Weight Factor or size of the analysis volume (StepOut or Z window) increases the amount of smoothing.\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\n\nInput Parameters\n\n\nAll attributes have the same set of input parameters. The only difference is that some have a choice of output attribute.\n\n\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nSpecifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1.{: style=\"width:60%\"}\n\n\n\n\n\n\nStepout\n\n\nSpecifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1.\n\n\n\n\n\n\nWeight Factor\n\n\nDetermines the extent of the gaussian weight function used in the weighted least squares approximation.  The standard deviation of the gaussian weight function (\nsigma\n) is related to this value by \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nsigma = min(2*Stepout, 2*Z_Window) * Weight_Factor\n.\n A value of 0.15 gives near zero weight for points at the smallest extent of the analysis cube.\n\n\n\n\n\n\n\n\nReferences\n\n\nAnisotropic Multidimensional Savitzky Golay kernels for Smoothing, Differentiation and Reconstruction\n\n\nPolynomial Expansion for Orientation and Motion Estimation",
            "title": "LPA Smoothing"
        },
        {
            "location": "/External_Attributes/LPA_Smooth/#local-polynomial-approximation-smoothing",
            "text": "",
            "title": "Local Polynomial Approximation Smoothing"
        },
        {
            "location": "/External_Attributes/LPA_Smooth/#script-ex_lpa_smoothpy",
            "text": "",
            "title": "Script: ex_lpa_smooth.py"
        },
        {
            "location": "/External_Attributes/LPA_Smooth/#description",
            "text": "This  External Attribute  script can be used to apply structure preserving smoothing. A region of data around each sample location is fitted by a second order 3D polynomial using gaussian weighted least squares.   The approximation has the following form:  \\[\n    r_0 + r_1 * x + r_2 * y + r_3 * z + r_4 * x^2 + r_5 * y^2 + r_6 * z^2 + r_7 * x*y + r_8 * x*z + r_9 * y*z\n\\] where x (inline), y (crossline) and z (time/depth) are relative to the analysis location, ie the analysis location has x=y=z=0.  This attribute calculates and outputs only the r0 term of the local polynomial approximation. This provides a smoother version of the input with relatively minor smearing of steep dips and fault cuts. Increasing either the Weight Factor or size of the analysis volume (StepOut or Z window) increases the amount of smoothing.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/LPA_Smooth/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/External_Attributes/LPA_Smooth/#input-parameters",
            "text": "All attributes have the same set of input parameters. The only difference is that some have a choice of output attribute.      NAME  DESCRIPTION      Z window (+/-samples)  Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1.{: style=\"width:60%\"}    Stepout  Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1.    Weight Factor  Determines the extent of the gaussian weight function used in the weighted least squares approximation.  The standard deviation of the gaussian weight function ( sigma ) is related to this value by  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sigma = min(2*Stepout, 2*Z_Window) * Weight_Factor .  A value of 0.15 gives near zero weight for points at the smallest extent of the analysis cube.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/LPA_Smooth/#references",
            "text": "Anisotropic Multidimensional Savitzky Golay kernels for Smoothing, Differentiation and Reconstruction  Polynomial Expansion for Orientation and Motion Estimation",
            "title": "References"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/",
            "text": "Local Polynomial Approximation\n\n\nDescription\n\n\nThis series of External Attributes are based around fitting a second order 3D polynomial to a region of data around each sample location using gaussian weighted least squares. For regularly sampled data the fit can be calculated very efficiently by convolution. \n\n\nThe approximation has the following form:\n\n\n\\[\n    r_0 + r_1*x + r_2*y + r_3*z + r_4*x^2 + r_5*y^2 +r_6*z^2 + r_7*x*y + r_8*x*z + r_9*y*z\n\\]\nwhere x (inline), y (crossline) and z (time/depth) are relative to the analysis location, ie the analysis location has x=y=z=0.\n\n\nInput Parameters\n\n\nAll attributes have the same set of input parameters. The only difference is that some have a choice of output attribute.\n\n\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nSpecifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1.{: style=\"width:60%\"}\n\n\n\n\n\n\nStepout\n\n\nSpecifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1.\n\n\n\n\n\n\nWeight Factor\n\n\nDetermines the extent of the gaussian weight function used in the weighted least squares approximation.  The standard deviation of the gaussian weight function (\nsigma\n) is related to this value by \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\nsigma = min(2*Stepout, 2*Z_Window) * Weight_Factor\n.\n A value of 0.15 gives near zero weight for points at the smallest extent of the analysis cube.\n\n\n\n\n\n\n\n\nLPA Dip\n\n\nThis attribute (\nex_lpa_dip.py\n) uses the local polynomial approximation coefficients to estimate an orientation tensor as per \nFarneb\u00e4ck (2002)\n and assumes the orientation of the first eigenvector is normal to the local event dip. Output can be either the inline or crossline dip. The units are millseconds per meter for time data and millimetres per metre for depth data.  Only \nNumba JIT compiler\n versions of this attribute are provided.\n\n\nThere are two versions of the attribute:\n\n\n\n\nex_lpa_dip_raw.py\n which does not include any post processing of the computed dips. The output will include a lot of steep non-geologic dips whenever an event ends. These spurious dips can generally be removed by applying a median filter (as per the example below).\n\n\nex_lpa_dip.py\n which includes dip processing comprising removal of dips beyond a user specified limit and a low pass filter along the Z direction.\n\n\n\n\nThe example on the left shows inline dip on a crossline from a PSDM volume calculated by \nex_lpa_dip_raw.py\n using a 5x5x5 sample volume (Zwindow: 2, Stepout: 2,2) with a subsequent 3x3x3 sample median filter applied to remove spurious dips. The image on the right shows the output of \nex_lpa_dip.py\n for the same sample volume with a dip range limit of +/-1200 mm/m. \n\n\n\n\n\n\n\n\n\n\n\nLPA Coefficients\n\n\nThis attribute (\nex_lpa_coef.py\n) outputs all of the local polynomial approximation coefficients. The r0 output is identical to the LPA Smoothing attribute. Only a \nNumba JIT compiler\n version of this attribute is provided. The example below shows the inline first and second derivative components on a crossline.\n\n\n\n\n\n\n\n\n\n\n\nLPA Eigenvalues\n\n\nThis attribute (\nex_lpa_eigenvals.py\n) uses the local polynomial approximation coefficients to estimate an orientation tensor as per \nFarneb\u00e4ck (2002)\n. Output are the eigenvalues (e1, e2, e3) of the tensor in descending order. Only a \nNumba JIT compiler\n version of this attribute is provided. The example below shows the first (left image) and second (right image) eigenvalues on a crossline.\n\n\n\n\n\n\n\n\n\n\n\nLPA Eigenvectors\n\n\nThis attribute (\nex_lpa_eigenvec.py\n) uses the local polynomial approximation coefficients to estimate an orientation tensor as per \nFarneb\u00e4ck (2002)\n. Output are the eigenvectors (t1x,t1y,t1z,t2x,t2y,t2z,t3x,t3y,t3z) of the tensor. Eigenvector [t1x, t1y t1z] corresponds to the first eigenvalue, e1 etc. Only a \nNumba JIT compiler\n version of this attribute is provided. The example below shows the y-component (left image) and z-component (right image) of the first eigenvector, ie t1y and t1z.\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\n\nAnisotropic Multidimensional Savitzky Golay kernels for Smoothing, Differentiation and Reconstruction\n\n\nPolynomial Expansion for Orientation and Motion Estimation",
            "title": "Local polynomial approximation"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/#local-polynomial-approximation",
            "text": "",
            "title": "Local Polynomial Approximation"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/#description",
            "text": "This series of External Attributes are based around fitting a second order 3D polynomial to a region of data around each sample location using gaussian weighted least squares. For regularly sampled data the fit can be calculated very efficiently by convolution.   The approximation has the following form:  \\[\n    r_0 + r_1*x + r_2*y + r_3*z + r_4*x^2 + r_5*y^2 +r_6*z^2 + r_7*x*y + r_8*x*z + r_9*y*z\n\\] where x (inline), y (crossline) and z (time/depth) are relative to the analysis location, ie the analysis location has x=y=z=0.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/#input-parameters",
            "text": "All attributes have the same set of input parameters. The only difference is that some have a choice of output attribute.      NAME  DESCRIPTION      Z window (+/-samples)  Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1.{: style=\"width:60%\"}    Stepout  Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1.    Weight Factor  Determines the extent of the gaussian weight function used in the weighted least squares approximation.  The standard deviation of the gaussian weight function ( sigma ) is related to this value by  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 sigma = min(2*Stepout, 2*Z_Window) * Weight_Factor .  A value of 0.15 gives near zero weight for points at the smallest extent of the analysis cube.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/#lpa-dip",
            "text": "This attribute ( ex_lpa_dip.py ) uses the local polynomial approximation coefficients to estimate an orientation tensor as per  Farneb\u00e4ck (2002)  and assumes the orientation of the first eigenvector is normal to the local event dip. Output can be either the inline or crossline dip. The units are millseconds per meter for time data and millimetres per metre for depth data.  Only  Numba JIT compiler  versions of this attribute are provided.  There are two versions of the attribute:   ex_lpa_dip_raw.py  which does not include any post processing of the computed dips. The output will include a lot of steep non-geologic dips whenever an event ends. These spurious dips can generally be removed by applying a median filter (as per the example below).  ex_lpa_dip.py  which includes dip processing comprising removal of dips beyond a user specified limit and a low pass filter along the Z direction.   The example on the left shows inline dip on a crossline from a PSDM volume calculated by  ex_lpa_dip_raw.py  using a 5x5x5 sample volume (Zwindow: 2, Stepout: 2,2) with a subsequent 3x3x3 sample median filter applied to remove spurious dips. The image on the right shows the output of  ex_lpa_dip.py  for the same sample volume with a dip range limit of +/-1200 mm/m.",
            "title": "LPA Dip"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/#lpa-coefficients",
            "text": "This attribute ( ex_lpa_coef.py ) outputs all of the local polynomial approximation coefficients. The r0 output is identical to the LPA Smoothing attribute. Only a  Numba JIT compiler  version of this attribute is provided. The example below shows the inline first and second derivative components on a crossline.",
            "title": "LPA Coefficients"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/#lpa-eigenvalues",
            "text": "This attribute ( ex_lpa_eigenvals.py ) uses the local polynomial approximation coefficients to estimate an orientation tensor as per  Farneb\u00e4ck (2002) . Output are the eigenvalues (e1, e2, e3) of the tensor in descending order. Only a  Numba JIT compiler  version of this attribute is provided. The example below shows the first (left image) and second (right image) eigenvalues on a crossline.",
            "title": "LPA Eigenvalues"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/#lpa-eigenvectors",
            "text": "This attribute ( ex_lpa_eigenvec.py ) uses the local polynomial approximation coefficients to estimate an orientation tensor as per  Farneb\u00e4ck (2002) . Output are the eigenvectors (t1x,t1y,t1z,t2x,t2y,t2z,t3x,t3y,t3z) of the tensor. Eigenvector [t1x, t1y t1z] corresponds to the first eigenvalue, e1 etc. Only a  Numba JIT compiler  version of this attribute is provided. The example below shows the y-component (left image) and z-component (right image) of the first eigenvector, ie t1y and t1z.",
            "title": "LPA Eigenvectors"
        },
        {
            "location": "/External_Attributes/LPA_Attributes/#references",
            "text": "Anisotropic Multidimensional Savitzky Golay kernels for Smoothing, Differentiation and Reconstruction  Polynomial Expansion for Orientation and Motion Estimation",
            "title": "References"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/",
            "text": "Spatial Filters\n\n\nScript: Filtering/ex_spatial_filter_circular.py\n\n\nDescription\n\n\nThis Python \nExternal Attribute\n script applies lowpass, highpass, bandpass or band reject circularly symmetric spatial filters. The filters are applied by direct spatial convolution using the MAXFLAT operators presented by \nKhan and Ohba (2001)\n.\n\n\n\n\nNote that the filter cutoff or band pass/reject frequency is specified in Normalised Spatial Frequency. Normalised Frequency ranges from 0 to 1 at the spatial nyquist. Converting a spatial frequency in cycles/metre to the equivalent Normalised Spatial Frequency is as simple as dividing it by the spatial nyquist frequency.\n\n\nAs written the filter does not take into account differences in spatial sampling in the inline and crossline directions.\n\n\nExamples\n\n\nThis example uses a Low Pass filter to remove acquisition footprint from the F3 Demo dataset.\n\n\nInline 425: FK Spectrum\n\n\n\n\nNote the noise at 0.0133 cycles/metre or 0.67 normalised frequency (i.e. 0.0133/0.02).\n\n\nA spatial low pass filter with a normalised frequency cutoff of 0.5 is very effective at attenuating this acquisition footprint.\n\n\nInline 425\n\n\n\n\n\n\n\n\n\n\nInline 425: FK Spectrum after filter\n\n\n\n\nTime Slice 300ms\n\n\n\n\n\n\n\n\n\n\nInput Parameters\n\n\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nStepout\n\n\nDetermines the size of the convolution operator. Minimum of 9 (filter kernel size of 19) recommended\n\n\n\n\n\n\nType\n\n\nFilter type - Low Pass, High Pass, Band Pass or Band Reject\n\n\n\n\n\n\nNormalised Spatial Frequency\n\n\nFor Low Pass and High Pass filters this specifies the filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point.",
            "title": "Spatial filter - Circular"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#spatial-filters",
            "text": "",
            "title": "Spatial Filters"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#script-filteringex_spatial_filter_circularpy",
            "text": "",
            "title": "Script: Filtering/ex_spatial_filter_circular.py"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#description",
            "text": "This Python  External Attribute  script applies lowpass, highpass, bandpass or band reject circularly symmetric spatial filters. The filters are applied by direct spatial convolution using the MAXFLAT operators presented by  Khan and Ohba (2001) .   Note that the filter cutoff or band pass/reject frequency is specified in Normalised Spatial Frequency. Normalised Frequency ranges from 0 to 1 at the spatial nyquist. Converting a spatial frequency in cycles/metre to the equivalent Normalised Spatial Frequency is as simple as dividing it by the spatial nyquist frequency.  As written the filter does not take into account differences in spatial sampling in the inline and crossline directions.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#examples",
            "text": "This example uses a Low Pass filter to remove acquisition footprint from the F3 Demo dataset.",
            "title": "Examples"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#inline-425-fk-spectrum",
            "text": "Note the noise at 0.0133 cycles/metre or 0.67 normalised frequency (i.e. 0.0133/0.02).  A spatial low pass filter with a normalised frequency cutoff of 0.5 is very effective at attenuating this acquisition footprint.",
            "title": "Inline 425: FK Spectrum"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#inline-425",
            "text": "",
            "title": "Inline 425"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#inline-425-fk-spectrum-after-filter",
            "text": "",
            "title": "Inline 425: FK Spectrum after filter"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#time-slice-300ms",
            "text": "",
            "title": "Time Slice 300ms"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Circular/#input-parameters",
            "text": "NAME  DESCRIPTION      Stepout  Determines the size of the convolution operator. Minimum of 9 (filter kernel size of 19) recommended    Type  Filter type - Low Pass, High Pass, Band Pass or Band Reject    Normalised Spatial Frequency  For Low Pass and High Pass filters this specifies the filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/",
            "text": "Spatial Filters - Rectangular Symmetry\n\n\nScript: Filtering/ex_spatial_filter_rectangular.py\n\n\nDescription\n\n\nThis Python \nExternal Attribute\n script applies lowpass, highpass, bandpass or band reject spatial filters with rectangular symmetry. The filters are applied by direct spatial convolution of a kernel formed by cascading two 1D MAXFLAT operators (\nKhan and Ohba (2001)\n).\n\n\nBy setting the stepout in one direction to 0 the filter will be applied as a 1D spatial filter in the other direction.\n\n\nNote that the filter cutoff or band pass/reject frequency is specified in Normalised Spatial Frequency. Normalised Frequency ranges from 0 to 1 at the spatial nyquist. Converting a spatial frequency in cycles/metre to the equivalent Normalised Spatial Frequency is as simple as dividing it by the spatial nyquist frequency.\n\n\nExamples\n\n\nThis example shows inline and crossline FK spectra after applying a 2D lowpass rectangular filter with inline and crossline normalised frequency cutoffs of 0.6 and 0.3 respectively.\n\n\nInline FK Spectrum\n\n\n\n\n\n\n\n\n\n\nCrossline FK Spectrum\n\n\n\n\n\n\n\n\n\n\nThis example shows a timeslice at 300ms TWT from the F3 Demo dataset after applying a 1D spatial filter along the inlines (stepout of 0,9) with a crossline normalised frequency cutoff of 0.5.\n\n\nCrossline Lowpass Filter\n\n\n\n\n\n\n\n\n\n\nThis example shows the timeslice at 300ms TWT from the F3 Demo dataset with the crossline lowpass filter above followed by a 1D bandreject spatial filter along the crosslines (stepout 9,0) with an inline normalised rejection frequency of 0.17.\n\n\nInline Bandreject Filter\n\n\n\n\n\n\n\n\n\n\nInput Parameters\n\n\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nStepout\n\n\nDetermines the size of the convolution operator. Minimum of 9 (filter kernel size of 19) recommended. Setting the stepout to zero will apply a 1D filter, e.g. a stepout of 0,9 will apply a 1D crossline frequency filter\n\n\n\n\n\n\nType\n\n\nFilter type - Low Pass, High Pass, Band Pass or Band Reject\n\n\n\n\n\n\nNormalised Inline Spatial Frequency\n\n\nFor Low Pass and High Pass filters this specifies the inline filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point.\n\n\n\n\n\n\nNormalised Xline Spatial Frequency\n\n\nFor Low Pass and High Pass filters this specifies the crosslineline filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point.",
            "title": "Spatial filter - Rectangular"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#spatial-filters-rectangular-symmetry",
            "text": "",
            "title": "Spatial Filters - Rectangular Symmetry"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#script-filteringex_spatial_filter_rectangularpy",
            "text": "",
            "title": "Script: Filtering/ex_spatial_filter_rectangular.py"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#description",
            "text": "This Python  External Attribute  script applies lowpass, highpass, bandpass or band reject spatial filters with rectangular symmetry. The filters are applied by direct spatial convolution of a kernel formed by cascading two 1D MAXFLAT operators ( Khan and Ohba (2001) ).  By setting the stepout in one direction to 0 the filter will be applied as a 1D spatial filter in the other direction.  Note that the filter cutoff or band pass/reject frequency is specified in Normalised Spatial Frequency. Normalised Frequency ranges from 0 to 1 at the spatial nyquist. Converting a spatial frequency in cycles/metre to the equivalent Normalised Spatial Frequency is as simple as dividing it by the spatial nyquist frequency.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#examples",
            "text": "This example shows inline and crossline FK spectra after applying a 2D lowpass rectangular filter with inline and crossline normalised frequency cutoffs of 0.6 and 0.3 respectively.",
            "title": "Examples"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#inline-fk-spectrum",
            "text": "",
            "title": "Inline FK Spectrum"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#crossline-fk-spectrum",
            "text": "This example shows a timeslice at 300ms TWT from the F3 Demo dataset after applying a 1D spatial filter along the inlines (stepout of 0,9) with a crossline normalised frequency cutoff of 0.5.",
            "title": "Crossline FK Spectrum"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#crossline-lowpass-filter",
            "text": "This example shows the timeslice at 300ms TWT from the F3 Demo dataset with the crossline lowpass filter above followed by a 1D bandreject spatial filter along the crosslines (stepout 9,0) with an inline normalised rejection frequency of 0.17.",
            "title": "Crossline Lowpass Filter"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#inline-bandreject-filter",
            "text": "",
            "title": "Inline Bandreject Filter"
        },
        {
            "location": "/External_Attributes/Spatial_Filter_Rectangular/#input-parameters",
            "text": "NAME  DESCRIPTION      Stepout  Determines the size of the convolution operator. Minimum of 9 (filter kernel size of 19) recommended. Setting the stepout to zero will apply a 1D filter, e.g. a stepout of 0,9 will apply a 1D crossline frequency filter    Type  Filter type - Low Pass, High Pass, Band Pass or Band Reject    Normalised Inline Spatial Frequency  For Low Pass and High Pass filters this specifies the inline filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point.    Normalised Xline Spatial Frequency  For Low Pass and High Pass filters this specifies the crosslineline filter cutoff. For Band Pass/Reject filters this is the centre of the pass/reject band. The width of the band is hardwired to +/- 0.1 in the script. The filter cutoff corresponds to the half amplitude point.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/Vector_Filters/",
            "text": "Vector Filter\n\n\nScript: ex_vector_filter_dip.py\n\n\nDescription\n\n\nThis \nExternal Attribute\n script can be used to apply a vector filter to orientation ( inline and crossline dip) data. The script offers a choice of mean vector, L1 vector median and L2 vector median filters.\n\n\nThe following outputs are available after filtering:\n\n\n\n\n\n\n\n\nOUTPUT\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nInline Dip\n\n\nEvent dip observed on a crossline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger inline numbers producing positive dips.\n\n\n\n\n\n\nCrossline Dip\n\n\nEvent dip observed on an inline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger crossline numbers producing positive dips.\n\n\n\n\n\n\nTrue Dip\n\n\nEvent dip in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output is always positive.\n\n\n\n\n\n\nDip Azimuth\n\n\nAzimuth of the True Dip direction relative to the survey orientation. Output ranges from -180 to 180 degrees. Positive azimuth is defined from the inline in the direction of increasing crossline numbers. Azimuth = 0 indicates that the dip is dipping in the direction of increasing crossline numbers. Azimuth = 90 indicates that the dip is dipping in the direction of increasing inline numbers.\n\n\n\n\n\n\n\n\nThe script require the numba Python package.\n\n\nExamples\n\n\nUnfiltered phase dip - crossline dip on an inline\n\n\n\nMean vector filtered phase dip - 3x3x3 (Stepout and ZWindow of 1)\n\n\nL1 vector median filtered phase dip - 3x3x3 (Stepout and ZWindow of 1)\n\n\nL2 vector median filtered phase dip - 3x3x3 (Stepout and ZWindow of 1)\n\n\nInput Parameters\n\n\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nWhat to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nSpecifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1.\n\n\n\n\n\n\nStepout\n\n\nSpecifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1.\n\n\n\n\n\n\nFilter\n\n\nChoice of Mean Dip, L1 Vector Median or L2 Vector Median",
            "title": "Vector Filters"
        },
        {
            "location": "/External_Attributes/Vector_Filters/#vector-filter",
            "text": "",
            "title": "Vector Filter"
        },
        {
            "location": "/External_Attributes/Vector_Filters/#script-ex_vector_filter_dippy",
            "text": "",
            "title": "Script: ex_vector_filter_dip.py"
        },
        {
            "location": "/External_Attributes/Vector_Filters/#description",
            "text": "This  External Attribute  script can be used to apply a vector filter to orientation ( inline and crossline dip) data. The script offers a choice of mean vector, L1 vector median and L2 vector median filters.  The following outputs are available after filtering:     OUTPUT  DESCRIPTION      Inline Dip  Event dip observed on a crossline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger inline numbers producing positive dips.    Crossline Dip  Event dip observed on an inline in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output can be positive or negative with the convention that events dipping towards larger crossline numbers producing positive dips.    True Dip  Event dip in microseconds per metre for time surveys and millimetres per metre for depth surveys. Output is always positive.    Dip Azimuth  Azimuth of the True Dip direction relative to the survey orientation. Output ranges from -180 to 180 degrees. Positive azimuth is defined from the inline in the direction of increasing crossline numbers. Azimuth = 0 indicates that the dip is dipping in the direction of increasing crossline numbers. Azimuth = 90 indicates that the dip is dipping in the direction of increasing inline numbers.     The script require the numba Python package.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/Vector_Filters/#examples",
            "text": "Unfiltered phase dip - crossline dip on an inline  Mean vector filtered phase dip - 3x3x3 (Stepout and ZWindow of 1)  L1 vector median filtered phase dip - 3x3x3 (Stepout and ZWindow of 1)  L2 vector median filtered phase dip - 3x3x3 (Stepout and ZWindow of 1)",
            "title": "Examples"
        },
        {
            "location": "/External_Attributes/Vector_Filters/#input-parameters",
            "text": "NAME  DESCRIPTION      Output  What to calculate - choice of inline dip, crossline dip, true dip or dip azimuth.    Z window (+/-samples)  Specifies the extent of the analysis cube in the Z direction. Number of Z samples in cube will be 2*Z_window+1.    Stepout  Specifies the inline and crossline extent of the analysis cube. Number of samples in each direction will be 2*Stepout+1.    Filter  Choice of Mean Dip, L1 Vector Median or L2 Vector Median",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/Z_Delay_Est/",
            "text": "Time Delay Estimation\n\n\nScript: Miscellaneous/ex_correlation.py\n\n\nDescription\n\n\nThis Python \nExternal Attribute\n script provides an alternative to the builtin OpendTect \nMatch Delta\n attribute to measure time shifts between similar events in different seismic volumes. This script uses local normalised cross correlation to determine the relative Z shift between 2 data volumes. Aside from the estimate of relative Z shift the attribute can also output the correlation value. The correlation value which ranges from 0 (low correlation) to 1 (high correlation) provides a quantitative assessment of the reliability of the Z shift estimate.\n\n\nThe script requires the Numba Python package.\n\n\nExamples\n\n\nThis example provides a comparison of this external attribute script (left) with the Match Delta attribute (right) for a depth section and itself shifted up by 13 metres. The Match Delta attribute output is much noisier albiet it can be calulated much quicker.\n\n\n\n\n\n\n\n\n\nThis example shows the Correlation Quality output for the same data as above.\n\n\nInput Parameters\n\n\n\n\n\n\n\n\n\n\nNAME\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\nOutput\n\n\nWhat to calculate - choice of the Z shift in millisecs or metres or the corresponding correlation coefficient\n\n\n\n\n\n\nZ window (+/-samples)\n\n\nThis in conjunction with the Max Lag parameter determines the length of the segments cross correlated. SegmentLength = 2*(Zwindow - MaxLag)+1\n\n\n\n\n\n\nMax Lag (samples)\n\n\nSpecifies maximum number of samples to search for the maximum correlation.\n\n\n\n\n\n\n\n\nNote the user has to ensure that Z window is greater than Max Lag otherwise the script will exit with errors.",
            "title": "Z Delay Estimation"
        },
        {
            "location": "/External_Attributes/Z_Delay_Est/#time-delay-estimation",
            "text": "",
            "title": "Time Delay Estimation"
        },
        {
            "location": "/External_Attributes/Z_Delay_Est/#script-miscellaneousex_correlationpy",
            "text": "",
            "title": "Script: Miscellaneous/ex_correlation.py"
        },
        {
            "location": "/External_Attributes/Z_Delay_Est/#description",
            "text": "This Python  External Attribute  script provides an alternative to the builtin OpendTect  Match Delta  attribute to measure time shifts between similar events in different seismic volumes. This script uses local normalised cross correlation to determine the relative Z shift between 2 data volumes. Aside from the estimate of relative Z shift the attribute can also output the correlation value. The correlation value which ranges from 0 (low correlation) to 1 (high correlation) provides a quantitative assessment of the reliability of the Z shift estimate.  The script requires the Numba Python package.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/Z_Delay_Est/#examples",
            "text": "This example provides a comparison of this external attribute script (left) with the Match Delta attribute (right) for a depth section and itself shifted up by 13 metres. The Match Delta attribute output is much noisier albiet it can be calulated much quicker.     This example shows the Correlation Quality output for the same data as above.",
            "title": "Examples"
        },
        {
            "location": "/External_Attributes/Z_Delay_Est/#input-parameters",
            "text": "NAME  DESCRIPTION      Output  What to calculate - choice of the Z shift in millisecs or metres or the corresponding correlation coefficient    Z window (+/-samples)  This in conjunction with the Max Lag parameter determines the length of the segments cross correlated. SegmentLength = 2*(Zwindow - MaxLag)+1    Max Lag (samples)  Specifies maximum number of samples to search for the maximum correlation.     Note the user has to ensure that Z window is greater than Max Lag otherwise the script will exit with errors.",
            "title": "Input Parameters"
        },
        {
            "location": "/External_Attributes/ZC_Block/",
            "text": "Zero Crossing Block\n\n\nScript: Miscellaneous/ex_zc_block.py\n\n\nDescription\n\n\nThis Python \nExternal Attribute\n script blocks a seismic trace between zero crossings. The block amplitude is determined by the min/max of the interval blocked.\n\n\nThe script requires the Numba Python package.\n\n\nExamples\n\n\nThis example shows the attribute output (blue) over the input (red). The small differences apparent are believed to be due to how OpendTect interpolates between samples.\n\n\n\nInput Parameters\n\n\n\n\nThere are no input parameters other than selection of the input volume.",
            "title": "Zero crossing trace block"
        },
        {
            "location": "/External_Attributes/ZC_Block/#zero-crossing-block",
            "text": "",
            "title": "Zero Crossing Block"
        },
        {
            "location": "/External_Attributes/ZC_Block/#script-miscellaneousex_zc_blockpy",
            "text": "",
            "title": "Script: Miscellaneous/ex_zc_block.py"
        },
        {
            "location": "/External_Attributes/ZC_Block/#description",
            "text": "This Python  External Attribute  script blocks a seismic trace between zero crossings. The block amplitude is determined by the min/max of the interval blocked.  The script requires the Numba Python package.",
            "title": "Description"
        },
        {
            "location": "/External_Attributes/ZC_Block/#examples",
            "text": "This example shows the attribute output (blue) over the input (red). The small differences apparent are believed to be due to how OpendTect interpolates between samples.",
            "title": "Examples"
        },
        {
            "location": "/External_Attributes/ZC_Block/#input-parameters",
            "text": "There are no input parameters other than selection of the input volume.",
            "title": "Input Parameters"
        },
        {
            "location": "/license/",
            "text": "License\n\n\nThe plugins and documentation are released under the terms of the \nGNU General Public License Version 3\n.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "The plugins and documentation are released under the terms of the  GNU General Public License Version 3 .",
            "title": "License"
        },
        {
            "location": "/relnotes/",
            "text": "Release Notes\n\n\nRelease 6.0.2\n\n\nExternalAttrib\n\n\n\n\nFix for multi-trace multi-attribute input - no longer restricted to input from same multi-attribute volume [#17]\n\n\n\n\nRelease 6.0.1\n\n\nExternalAttrib\n\n\n\n\nAdd Minimum option to ZSampMargin and StepOut parameters [#15]\n\n\nFix for error message for multi-attribute input [#16]\n\n\n\n\nRelease 6.0.0\n\n\nGradientAttrib\n\n\n\n\nNew attribute for calculating inline, crossline or z gradient using various derivative operators\n\n\n\n\nRelease 6.0.0pre7-1\n\n\nExternalAttrib\n\n\n\n\nAllow %ENVVAR% construct in interpreter field where ENVVAR is a system environment variable with the interpreter path [#12]\n\n\nUse environment variable, OD_EX_DIR, as the root of the folder structure containing the external attribute files [#13]\n\n\nExport ExternalAttrib and ExtProc classes to fix link errors during Windows build\n\n\n\n\nRelease 5.0.10\n\n\nExternalAttrib\n\n\n\n\nFix so changing attribute clears Input ui controls\n\n\nAllow %ENVVAR% construct in interpreter field where ENVVAR is a system environment variable with the interpreter path [#12]\n\n\nUse environment variable, OD_EX_DIR, as the root of the folder structure containing the external attribute files [#13]\n\n\nExport ExternalAttrib and ExtProc classes to fix link errors during Windows build\n\n\n\n\nRelease 6.0.0pre7\n\n\nAll Attributes\n\n\n\n\nPort all attributes for compatibility with OpendTect v6\n\n\n\n\nExternalAttrib\n\n\n\n\nFix so changing attribute clears Input ui controls\n\n\n\n\nRelease 5.0.7\n\n\nExternalAttrib\n\n\n\n\nSupport multi-threaded execution by starting multiple copies of the external application\n\n\nSupport multi-attribute multi-trace input (upto 6 input attributes)\n\n\nAdd \"Parallel\" (boolean) tag to the JSON parameter string to control single vs multi-threaded computation\n\n\nAdd \"Inputs\" (Array of Strings) tag to the JSON parameter string to indicate the input attributes\n\n\nAdd simple python examples of multi-attribute single trace input and multi-attribute multi-trace input\n\n\n\n\nRelease 5.0.6-1\n\n\nAVOAttrib\n\n\n\n\nAdd example color tables\n\n\n\n\nExternalAttrib\n\n\n\n\nAdd local polynomial approximation external attribute examples\n\n\nAdd dipFactor and zFactor items to the SeismicInfo block exported to external attribute scripts (note changes to extattrib.py)\n\n\nAdd \"Symmetric\" tag to the \"ZSampMargin' JSON parameter string tag. The value of the tag is a boolean constant (True/False). If set True the UI will show a single entry box. Input sets the 'ZSampMargin.Value' array to [-Input, Input]. Default is 'ZSampMargin.Symmetric': False for which the UI displays entry boxes for both the window start and stop.\n\n\nBugfix: ensure number of samples provided to external attribute includes ZSampMargin - fixes calculation failure on horizons and slices \n\n\n\n\nMLVFilterttrib\n\n\n\n\nAdd example color table for mlv_elements\n\n\n\n\nRelease 5.0.6\n\n\nAVOAttrib\n\n\n\n\nFix typo in UI\n\n\n\n\nExternalAttrib\n\n\n\n\nAdd \"Help\" tag to JSON parameter string. The value of the tag is a url string pointing to a help page for the attribute. This is optional.\n\n\nAdd \"Selection\" tag to JSON parameter string. The value of the tag is an object with a 'Name' (string), 'Values' (array of strings) and 'Select' (number) tags. Displays a list box labeled 'Name' with options specified in 'Values' and default selection being item number 'Select'. This is optional.\n\n\n\n\nRSpecAttrib\n\n\n\n\nReplace window parameter with Z gate. Window parameter set from Z gate width and attribute input taken at centre of Z gate. This allows attribute extraction offset from an horizon.",
            "title": "Release notes"
        },
        {
            "location": "/relnotes/#release-notes",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/relnotes/#release-602",
            "text": "",
            "title": "Release 6.0.2"
        },
        {
            "location": "/relnotes/#externalattrib",
            "text": "Fix for multi-trace multi-attribute input - no longer restricted to input from same multi-attribute volume [#17]",
            "title": "ExternalAttrib"
        },
        {
            "location": "/relnotes/#release-601",
            "text": "",
            "title": "Release 6.0.1"
        },
        {
            "location": "/relnotes/#externalattrib_1",
            "text": "Add Minimum option to ZSampMargin and StepOut parameters [#15]  Fix for error message for multi-attribute input [#16]",
            "title": "ExternalAttrib"
        },
        {
            "location": "/relnotes/#release-600",
            "text": "",
            "title": "Release 6.0.0"
        },
        {
            "location": "/relnotes/#gradientattrib",
            "text": "New attribute for calculating inline, crossline or z gradient using various derivative operators",
            "title": "GradientAttrib"
        },
        {
            "location": "/relnotes/#release-600pre7-1",
            "text": "",
            "title": "Release 6.0.0pre7-1"
        },
        {
            "location": "/relnotes/#externalattrib_2",
            "text": "Allow %ENVVAR% construct in interpreter field where ENVVAR is a system environment variable with the interpreter path [#12]  Use environment variable, OD_EX_DIR, as the root of the folder structure containing the external attribute files [#13]  Export ExternalAttrib and ExtProc classes to fix link errors during Windows build",
            "title": "ExternalAttrib"
        },
        {
            "location": "/relnotes/#release-5010",
            "text": "",
            "title": "Release 5.0.10"
        },
        {
            "location": "/relnotes/#externalattrib_3",
            "text": "Fix so changing attribute clears Input ui controls  Allow %ENVVAR% construct in interpreter field where ENVVAR is a system environment variable with the interpreter path [#12]  Use environment variable, OD_EX_DIR, as the root of the folder structure containing the external attribute files [#13]  Export ExternalAttrib and ExtProc classes to fix link errors during Windows build",
            "title": "ExternalAttrib"
        },
        {
            "location": "/relnotes/#release-600pre7",
            "text": "",
            "title": "Release 6.0.0pre7"
        },
        {
            "location": "/relnotes/#all-attributes",
            "text": "Port all attributes for compatibility with OpendTect v6",
            "title": "All Attributes"
        },
        {
            "location": "/relnotes/#externalattrib_4",
            "text": "Fix so changing attribute clears Input ui controls",
            "title": "ExternalAttrib"
        },
        {
            "location": "/relnotes/#release-507",
            "text": "",
            "title": "Release 5.0.7"
        },
        {
            "location": "/relnotes/#externalattrib_5",
            "text": "Support multi-threaded execution by starting multiple copies of the external application  Support multi-attribute multi-trace input (upto 6 input attributes)  Add \"Parallel\" (boolean) tag to the JSON parameter string to control single vs multi-threaded computation  Add \"Inputs\" (Array of Strings) tag to the JSON parameter string to indicate the input attributes  Add simple python examples of multi-attribute single trace input and multi-attribute multi-trace input",
            "title": "ExternalAttrib"
        },
        {
            "location": "/relnotes/#release-506-1",
            "text": "",
            "title": "Release 5.0.6-1"
        },
        {
            "location": "/relnotes/#avoattrib",
            "text": "Add example color tables",
            "title": "AVOAttrib"
        },
        {
            "location": "/relnotes/#externalattrib_6",
            "text": "Add local polynomial approximation external attribute examples  Add dipFactor and zFactor items to the SeismicInfo block exported to external attribute scripts (note changes to extattrib.py)  Add \"Symmetric\" tag to the \"ZSampMargin' JSON parameter string tag. The value of the tag is a boolean constant (True/False). If set True the UI will show a single entry box. Input sets the 'ZSampMargin.Value' array to [-Input, Input]. Default is 'ZSampMargin.Symmetric': False for which the UI displays entry boxes for both the window start and stop.  Bugfix: ensure number of samples provided to external attribute includes ZSampMargin - fixes calculation failure on horizons and slices",
            "title": "ExternalAttrib"
        },
        {
            "location": "/relnotes/#mlvfilterttrib",
            "text": "Add example color table for mlv_elements",
            "title": "MLVFilterttrib"
        },
        {
            "location": "/relnotes/#release-506",
            "text": "",
            "title": "Release 5.0.6"
        },
        {
            "location": "/relnotes/#avoattrib_1",
            "text": "Fix typo in UI",
            "title": "AVOAttrib"
        },
        {
            "location": "/relnotes/#externalattrib_7",
            "text": "Add \"Help\" tag to JSON parameter string. The value of the tag is a url string pointing to a help page for the attribute. This is optional.  Add \"Selection\" tag to JSON parameter string. The value of the tag is an object with a 'Name' (string), 'Values' (array of strings) and 'Select' (number) tags. Displays a list box labeled 'Name' with options specified in 'Values' and default selection being item number 'Select'. This is optional.",
            "title": "ExternalAttrib"
        },
        {
            "location": "/relnotes/#rspecattrib",
            "text": "Replace window parameter with Z gate. Window parameter set from Z gate width and attribute input taken at centre of Z gate. This allows attribute extraction offset from an horizon.",
            "title": "RSpecAttrib"
        }
    ]
}